{
  "title": "Expand by top comention",
  "description": "Given a company, expands the top 5 comentioned companies in articles",
  "scriptSource": "function beforeAll(graphModel, graphSelection) {\n    if (!graphSelection || graphSelection.length === 0) {\n        graphSelection = [];\n        _.each(graphModel.nodes, function (node) {\n           graphSelection.push(node.id); \n        });\n    }\n    \n    let html = 'Number of results: <input type=\"text\" ng-model=\"number\" maxlength=\"3\" size=\"3\"/>';\n    f.openModal('Insert the number of top results', html);\n\n    return Promise.resolve({\n        model: graphModel,\n        selection: graphSelection\n    });\n}\n\nfunction onModalShow(scope, graphModel) {\n    scope.number = 5; // default value\n}\n\nfunction onModalOk(scope, graphModel) {\n    return scope.number\n}\n\nfunction afterModalClosed(graphModel, graphSelection, onOkModalResult) {\n    const max_top_results = onOkModalResult;\n    const selIds = new Set(graphSelection);\n    const companies = _.filter(graphModel.nodes, function (node) {\n        return node.type === 'Company' && selIds.has(node.id);\n    });\n    \n    const companyIds = _.map(companies, function (company) {\n       return company.payload.id; \n    });\n    const companyGremlinIds = _.map(companies, function (company) {\n       return company.id;\n    });\n    \n    const companiesPromise = [];\n    for (let comp = 0; comp < companies.length; comp++) {\n        const body = \n        {\n            size : 0,\n            aggs: {\n                top_comentioned: {\n                    filter: { term: {'companies' : companyIds[comp]} },\n                    aggs: {\n                        count: { terms: { field : 'companies', size: max_top_results + 1 } }\n                    }\n                }\n            }\n        };\n        \n        companiesPromise.push(f.executeEsSearch(null, null, body, null).then(function (results) {\n            const promises = [];\n            const aggregationCounts = [];\n            const buckets = results.aggregations.top_comentioned.count.buckets;\n            for (let bu = 0; bu < buckets.length; bu++) {\n                if (bu === 0) continue;\n                \n                const bucket = buckets[bu];\n                aggregationCounts.push(bucket.doc_count);\n                const query = {query: {term: {id: bucket.key}}};\n                promises.push(f.executeEsSearch('company', 'Company', query, 1)); \n            }\n            \n            return Promise.all(promises).then(function (documents) {\n                const gremlinIds = [];\n                _.each(documents, function (doc) {\n                    const hit = doc.hits.hits[0];\n                    gremlinIds.push(hit._index + '/' + hit._type + '/' + hit._id);\n                });\n                \n                const gremlinPromises = [];\n                _.each(gremlinIds, function (gremlinId) {\n                    gremlinPromises.push(f.executeGremlinQuery('g.V(\"'+gremlinId+'\")'));\n                });\n                \n                return Promise.all(gremlinPromises).then(function (gremlinResults){\n                    const resultArray = [];\n                    const ratio = 200 / 12;\n                    for(let i = 0; i < gremlinResults.length; i++) {\n                        const nodes = gremlinResults[i];\n                        \n                        _.each(nodes, function (node) {\n                            resultArray.push(node);\n                            const linkPair = {};\n                            linkPair.in = companyGremlinIds[comp];\n                            linkPair.out = node.id;\n                            const weight = Math.round((aggregationCounts[i] > 200 ? 200 : aggregationCounts[i]) / ratio) + 1;\n                            resultArray.push(createScriptedLink(linkPair, weight, aggregationCounts[i]));\n                        });\n                    }\n\n                    return resultArray;\n                });\n            });\n            \n            \n        }));\n    }\n\n    return Promise.all(companiesPromise).then(function (results) {\n        return f.addResultsToGraph(_.flatten(results));\n    });\n}\n\nfunction createScriptedLink(linkPair, weight, comentions) {\n    return {\n        id: hashCode(linkPair.in, linkPair.out),\n        type: 'edge',\n        label: comentions + ' comentions',\n        w: weight,\n        c: \"rgb(119,165,255)\",\n        inV: linkPair.in,\n        outV: linkPair.out\n    };\n}\n\nfunction hashCode(s1, s2){\n    let s;\n    if (s1 > s2) {\n        s = s1 + s2;\n    } else {\n        s = s2 + s1;\n    }\n    return 'SCRIPTED_EDGE_COMENTIONS-'+ s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n}",
  "version": 1,
  "type": "contextual"
}
