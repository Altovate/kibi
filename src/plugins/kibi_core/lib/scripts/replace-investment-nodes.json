{
  "title": "Replace Investment with edge. (works only with Kibi Demo data)",
  "description": "Replace all the investment nodes with an edge. (works only with Kibi Demo data)",
  "scriptSource": "function beforeAll(graphModel, graphSelection) {\n    let clonedModel = JSON.parse(JSON.stringify(graphModel));\n    let newNodes = [];\n    let newLinks = [];\n    let removeLinks = new Set();\n    let selection = [];\n    _.each(graphModel.nodes, function (node) {\n        if (node.type === 'Investment') {\n            let linkPair = {in:null, out:null};\n            _.each(graphModel.relations, function (relation) {\n                if (relation.out === node.id) {\n                    linkPair.in = relation.in;\n                    removeLinks.add(relation.id);\n                }\n                if (relation.in === node.id) {\n                    linkPair.out = relation.out;\n                    removeLinks.add(relation.id);\n                }\n            });\n            let weight = 2;\n            let raised = node.payload.raised_amount;\n            if (raised && raised > 0) {\n                weight = (3*Math.log(raised)) - 38;\n                console.log(weight);\n                if (weight < 1) {\n                    weight = 1;\n                }\n            }\n            newLinks.push(createScriptedLink(linkPair, weight, raised, node));\n        } else {\n            newNodes.push(node);\n        }\n    });\n    \n    _.each(graphModel.relations, function (relation) {\n        if (!removeLinks.has(relation.id)) {\n            newLinks.push(relation);\n        }\n    });\n\n    clonedModel.nodes = newNodes;\n    clonedModel.relations = newLinks;\n\n    return Promise.resolve({\n        model: clonedModel,\n        selection: selection,\n        relayout: true\n    });\n}\n\nfunction createScriptedLink(linkPair, weight, raised, node) {\n    return {\n        id: hashCode(linkPair.in + linkPair.out + node.id),\n        label: 'invested: ' + (raised ? raised : 'n/a'),\n        direction: \"in\", // null, in, out, both\n        size: weight,\n        color: \"rgb(119,165,255)\",\n        in: linkPair.in,\n        out: linkPair.out\n    };\n}\n\nfunction hashCode(s){\n  return 'SCRIPTED_EDGE-'+ s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n}",
  "version": 1,
  "type": "contextual"
}
