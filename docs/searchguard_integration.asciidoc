[[searchguard_integration]]

== Search Guard Integration and {kibi-name} access control

This section offers an overview of how to integrate Search Guard with {kibi-name}; for
further reference and detailed options please consult the
{searchguard-ref}[Search Guard documentation].

Before proceeding, make sure that:

- {kibi-name} is either running with HTTPS enabled or behind a reverse SSL proxy.
- The Gremlin Server is running with HTTPS enabled.

Please refer to the <<access_control,Authentication and access control>>
section for instructions on how on to enable HTTPS in both components.

=== SSL Certificates

All the Elasticsearch nodes in a cluster secured by Search Guard are required
to use SSL to encrypt all network traffic.

In addition, changing the Search Guard configuration requires the use
of a client SSL certificate to perform administrative actions.

To setup a Search Guard cluster, you will need to generate the following files:

- A **truststore** file, common to all nodes, containing the CA certificate
  chain.
- A **keystore** file, for each node, containing the certificate for the node.
- A **keystore** file, for each administrative user, containing a certificate
  bundle that identifies the user.
- A **keystore** file containing an SSL certificate for the Elasticsearch HTTP
  server.

These files can be either Java KeyStore files or PKCS12 bundles.

==== Issuing certificates in an existing PKI infrastructure

If your organization has a PKI infrastructure in place, you can generate Java
KeyStore files from a PEM bundle by using the `keytool` command, e.g.:

[source,shell]
----
$ keytool  \
  -importcert \
  -file ca.pem  \
  -keystore truststore.jks
----

The command will store the contents of `ca.pem` into a file named
`truststore.jks` in the current directory.

The same command can be used to convert certificates signed by your CA for
nodes, administrative users and the REST API.

Node certificates must include `oid:1.2.3.4.5.5` as a Subject Alternative Name
entry to work correctly with Search Guard; for details on how to customize the
OID, please consult the Search Guard documentation.

If you want to enable hostname verification, make sure that at least one
Subject Alternative Name is equal to the DNS name of the node.

Client certificates for administrative users must contain a unique
Distinguished Name to identify the user, e.g.:

----
CN=admin,DC=siren,DC=solutions
----

Certificates for the Elasticsearch HTTP server can be used across multiple
nodes by setting multiple hostnames in the Subject Alternative Name attribute
or by using a wildcard certificate.

==== Issuing certificates using the TLS certificate generator

Floragunn GmbH provides a {searchguard-tls-certificate-ref}[TLS certificate
generation service] which can be used to create a bundle of certificates for
evaluation purposes.

To try the certificates in a single node setup, it is possible to just
specify **localhost** as the first hostname and submit the form.

The bundle has the following contents:

- **README.txt**: provides an overview of the bundle and the passwords for all
  the keystores.
- **truststore.jks**: the CA certificate chain in Keystore format.
- **node-certificates**: the transport certificates for the nodes in several formats;
  these certificates can also be used for the Elasticsearch HTTP server.
- **client-certificates**: client certificates and private keys.
- **root-ca**: the root CA bundle in PEM format.
- **signing-ca**: the signing CA bundle in PEM format.

In addition to the online generator, Floragunn provides a
{searchguard-tls-tool-ref}[TLS tool] which can be used to manage a private
certification authority.

=== Search Guard installation

Install the *search-guard-5* plugin on each node in the
Elasticsearch cluster by changing to the node directory and running the
commands below; to find the most recent version of the plugins for your
Elasticsearch version please consult the
{searchguard-matrix-ref}[Search Guard version matrix].

[source,shell]
----
$ bin/elasticsearch-plugin install -b com.floragunn:search-guard-5:<version>
----

Then, copy the following files to the `config` directory of each node:

- The truststore file (e.g. `truststore.jks`).
- The keystore file containing the node certificate (e.g.
  `CN=localhost-keystore.jks`)
- The keystore file containing the certificate for the Elasticsearch HTTP
  server, only if different than the node certificate.

Open the _config/elasticsearch.yml_ file and set the following Search Guard
options:

**Node to node transport options:**

- **searchguard.ssl.transport.enabled**: needs to be set to **true** for Search
  Guard to work.
- **searchguard.ssl.transport.keystore_filepath**: the filename of the keystore
  file that contains the node certificate.
- **searchguard.ssl.transport.keystore_password**: the password of the keystore
  file that contains the node certificate.
- **searchguard.ssl.transport.truststore**: the filename of the truststore file
  that contains the root certificate chain.
- **searchguard.ssl.transport.truststore_password**: the password of the
  truststore file that contains the root certificate chain.
- **searchguard.ssl.transport.enforce_hostname_verification**: set to **true**
  to enable hostname verification, **false** otherwise.

**REST API options:**

- **searchguard.ssl.http.enabled**: set to **true** to enable SSL on the HTTP
  interface.
- **searchguard.ssl.http.keystore_filepath**: the filename of the keystore
  file that contains the certificate for the HTTP interface.
- **searchguard.ssl.http.keystore_password**: the password of the keystore
  file that contains the certificate for the HTTP interface.
- **searchguard.ssl.http.truststore**: the filename of the truststore file
  that contains the root certificate chain for the HTTP certificate.
- **searchguard.ssl.http.truststore_password**: the password of the truststore file
  that contains the root certificate chain for the HTTP certificate.

**Administrative user options:**

- **searchguard.authcz.admin_dn**: a list of Distinguished Names in SSL client
  certificates which are authorized to submit administrative requests.

**Client certificate authentication options:**

- **searchguard.ssl.http.clientauth_mode**: set to `OPTIONAL` to enable optional
client certificate authentication on the REST endpoint.

E.g.:

[source,yaml]
----
searchguard.ssl.transport.enabled: true
searchguard.ssl.transport.truststore_filepath: truststore.jks
searchguard.ssl.transport.truststore_password: <password>
searchguard.ssl.transport.keystore_filepath: CN=localhost-keystore.jks
searchguard.ssl.transport.keystore_password: <password>
searchguard.ssl.transport.enforce_hostname_verification: false
searchguard.ssl.http.enabled: true
searchguard.ssl.http.keystore_filepath: CN=localhost-keystore.jks
searchguard.ssl.http.keystore_password: <password>
searchguard.ssl.http.truststore_filepath: truststore.jks
searchguard.ssl.http.truststore_password: <password>
searchguard.authcz.admin_dn:
  - CN=sgadmin
searchguard.ssl.http.clientauth_mode: OPTIONAL
----

NOTE: Make sure that all the files in the configuration directory and the
certificate files are readable only by the user running Elasticsearch.

Start Elasticsearch:

[source,shell]
----
$ bin/elasticsearch
----

If either a certificate or a password is incorrect, Elasticsearch will not
start.
[[access_control_configuration]]
=== Access control configuration

Access control configuration (users, roles and privileges) is stored in an
Elasticsearch index which can be modified through the _sgadmin.sh_ script.

The script reads the configuration from a local directory containing YAML files
and uploads it to the index; the request is authenticated through a client SSL
certificate.

Once the configuration has been uploaded, it will be available to all the nodes
in the cluster, so it is not necessary to copy the Search Guard configuration
directory to all the Elasticsearch nodes, just on the node from where sgadmin
is run.

`sgadmin.sh` is available in the _plugins/search-guard-5/tools_ directory in
each Elasticsearch instance in which Search Guard has been installed; a
standalone version (`sgadmin-standalone.zip`) can be downloaded from
{searchguard-sgadmin-ref}[this page].

Once a Search Guard enabled cluster has been initialized, `sgadmin` can be used
to upload new configurations.

=== Siren Investigate Certificates

Here we give an example of where to store client certificates and keystores on Siren Investigate. 
**Note**: These are examples for a fresh install using the TLS certificate generator.

In _siren-investigate/pki_ (which was created earlier for https support) a new directory _searchguard_
 was created with the following:

- **CN=sgadmin.crtfull.pem**: a certificate bundle with administrative privileges over the 
  Search Guard Management REST API. Copied from **client-certificates** in TLS certificate generator bundle. 
- **CN=sgadmin.key.pem**: the key of the administrative certificate. Copied from **client-certificates** in 
  TLS certificate generator bundle. 
- **ca.pem**: the cluster CA certificate chain in PEM format. Copy of **root-ca.pem** from top level directory 
  TLS certificate generator bundle. 
- **CN=sgadmin-keystore.jks**: Keystore containing the admin certificate. Used with sgadmin. 
  Copied from **client-certificates** in TLS certificate generator bundle. 
                                 
The password of all Java keystores can be found in the **README.txt** from top level directory 
of TLS certificate generator bundle. 


==== Search Guard configuration

A Search Guard configuration directory contains the following files:

- **sg_config.yml**: contains the general configuration.
- **sg_action_groups.yml**: contains named groups of permissions.
- **sg_roles.yml**: contains the definition of roles.
- **sg_internal_users.yml**: the Search Guard internal users database.
- **sg_roles_mapping.yml**: contains the mapping between users and roles.

A sample configuration below is used for Elasticsearch with no data.
Further examples are available in the _config/sgconfig_ directory in the Elasticsearch 
instance included in the demo distribution; the contents of the
files are explained in the next sections and can be used as a general
guideline.

For additional configuration options please refer to the official
{searchguard-ref}#configuring-users-roles-and-permissions[Search Guard documentation].

**General configuration (sg_config.yml)**

[source,yaml]
----
searchguard:
  dynamic:
    http:
      anonymous_auth_enabled: false
      xff:
        enabled: false
    authc:
      transport_auth_domain:
        enabled: true
        order: 2
        http_authenticator:
          type: basic
        authentication_backend:
          type: internal
      basic_internal_auth_domain:
        enabled: true
        http_authenticator:
          type: basic
          challenge: true
        authentication_backend:
          type: intern
----

The _sg_config.yml_ file contains the configuration of the authentication
mechanisms and backends; the above configuration:

- Disables the anonymous role (_anonymous_auth_enabled: false_)
- Disables support for external proxies (_xff.enabled: false_)
- Enables HTTP basic authentication on the internal Search Guard user database.

**Action groups (sg_action_groups.yml)**

[source,yaml]
----
UNLIMITED:
  - '*'

###### INDEX LEVEL ######

INDICES_ALL:
  - 'indices:*'

# for backward compatibility
ALL:
  - INDICES_ALL

MANAGE:
  - 'indices:monitor/*'
  - 'indices:admin/*'

CREATE_INDEX:
  - 'indices:admin/create'
  - 'indices:admin/mapping/put'

MANAGE_ALIASES:
  - 'indices:admin/aliases*'

# for backward compatibility
MONITOR:
  - INDICES_MONITOR

INDICES_MONITOR:
  - 'indices:monitor/*'

DATA_ACCESS:
  - 'indices:data/*'
  - CRUD

WRITE:
  - 'indices:data/write*'
  - 'indices:admin/mapping/put'

READ:
  - 'indices:data/read*'
  - 'indices:admin/mappings/fields/get*'

DELETE:
  - 'indices:data/write/delete*'

CRUD:
  - READ
  - WRITE

SEARCH:
  - 'indices:data/read/search*'
  - 'indices:data/read/msearch*'
  - 'indices:siren/plan*'
  - 'indices:siren/mplan*'
  - SUGGEST

SUGGEST:
  - 'indices:data/read/suggest*'

INDEX:
  - 'indices:data/write/index*'
  - 'indices:data/write/update*'
  - 'indices:admin/mapping/put'
  - 'indices:data/write/bulk*'

GET:
  - 'indices:data/read/get*'
  - 'indices:data/read/mget*'

###### CLUSTER LEVEL ######

CLUSTER_ALL:
  - 'cluster:*'

CLUSTER_MONITOR:
  - 'cluster:monitor/*'

CLUSTER_COMPOSITE_OPS_RO:
  - 'indices:data/read/mget'
  - 'indices:data/read/msearch'
  - 'indices:siren/mplan'
  - 'indices:data/read/mtv'
  - 'indices:admin/aliases/exists*'
  - 'indices:admin/aliases/get*'

CLUSTER_COMPOSITE_OPS:
  - 'indices:data/write/bulk'
  - 'indices:admin/aliases*'
  - CLUSTER_COMPOSITE_OPS_RO

##### SIREN #####

SIREN_CLUSTER:
  - 'indices:data/read/scroll'
  - 'cluster:data/read/lock/create'
  - 'indices:data/read/msearch*'
  - 'cluster:internal/data/create'
  - 'cluster:internal/data/transfer*'
  - 'cluster:internal/data/delete'
  - 'cluster:internal/data/update/metadata'
  - 'cluster:siren/internal*'
  - 'indices:siren/mplan*'
  - 'cluster:admin/plugin/siren/license/get'
  - CLUSTER_COMPOSITE_OPS_RO

SIREN_COMPOSITE:
  - 'indices:siren/mplan*'
  - 'indices:siren/plan*'
  - 'indices:data/read/search-join'
  - 'indices:data/read/lock/release'

SIREN_READONLY:
  - 'indices:data/read/field_stats*'
  - 'indices:data/read/field_caps*'
  - 'indices:data/read/get*'
  - 'indices:data/read/mget*'
  - 'indices:data/read/search*'
  - 'indices:data/read/lock*'
  - 'indices:siren/mplan'
  - 'indices:siren/plan'
  - 'indices:admin/mappings/get*'
  - 'indices:admin/mappings/fields/get*'
  - 'indices:admin/validate/query*'
  - 'indices:admin/get*'
  - 'indices:admin/version/get*'
  - 'indices:data/siren/connector/*'
  - SIREN_COMPOSITE

SIREN_READWRITE:
  - 'indices:admin/exists*'
  - 'indices:admin/mapping/put*'
  - 'indices:admin/refresh*'
  - 'indices:data/write/delete*'
  - 'indices:data/write/index*'
  - 'indices:data/write/update*'
  - 'indices:data/write/bulk*'
  - SIREN_READONLY
----

This file contains named groups of permissions which can be used in the roles
configuration file; the above configuration includes Search Guard default
groups plus three {kibi-name} specific groups:

- **SIREN_READWRITE**: groups all the permissions needed to search and update
  the main {kibi-name} index (_.siren_); the group has to be assigned on the main index
  to all roles that can modify the {kibi-name} configuration.
- **SIREN_READONLY**: groups all the permissions needed to search any
  Elasticsearch index from {kibi-name}. The group has to be assigned on all indices
  that a role has access to.
- **SIREN_CLUSTER**: sets the permission to read results from scrolling
  searches and send composite requests.
- **SIREN_COMPOSITE**: groups all the permissions to execute composite requests
  not recognized by Search Guard; the group has to be granted on all indices
  to roles that have access only to a subset of indices (e.g. sirennoinvestor).

**Roles (sg_roles.yml)**

[source,yaml,subs="attributes"]
----
# Allows any action on the cluster.
sg_all_access:
  cluster:
    - '*'
  indices:
    '*':
      '*':
        - '*'

# Allows reading data from all indices.
sg_readall:
  indices:
    '*':
      '*':
        - READ

# Permissions for a Logstash client.
logstash:
  cluster:
    - 'indices:data/write/bulk*'
    - 'indices:admin/template/*'
    - CLUSTER_MONITOR
    - SIREN_CLUSTER
  indices:
    'logstash-*':
      '*':
        - CRUD
        - CREATE_INDEX
    '*beat*':
      '*':
        - CRUD
        - CREATE_INDEX

# Permissions for the Siren server process.
sirenserver:
  cluster:
      - 'cluster:monitor/nodes/info'
      - 'cluster:monitor/health'
      - 'cluster:monitor/main'
      - 'cluster:monitor/state'
      - 'cluster:monitor/nodes/stats'
      - SIREN_CLUSTER
      - CLUSTER_COMPOSITE_OPS
  indices:
    '*':
      '*':
        - indices:admin/get
    '?siren':
      '*':
        - ALL
    '?sirenaccess':
      '*':
        - ALL

# Permissions for the internal federate user
federateserver:
  cluster:
    - 'indices:admin/aliases'
  indices:
    ?siren-federate-datasources:
      '*':
        - ALL
    ?siren-federate-indices:
      '*':
        - ALL
    ?siren-federate-target:
      '*':
        - ALL

# Permissions for a Investigate administrator
sirenadmin:
  cluster:
    - SIREN_CLUSTER
    - CLUSTER_MONITOR
    - 'cluster:admin/plugin/siren/license/put'
    - 'cluster:admin/plugin/siren/license/delete'
    - 'indices:data/write/bulk'
    - 'cluster:admin/siren/connector/*'
  indices:
    'watcher_alarms*':
      '*':
        - SIREN_READONLY
    'data-*':
        - SIREN_READONLY
    'db-*':
      '*':
        - SIREN_READWRITE
        - indices:admin/create
        - indices:admin/siren/connector/*
    '*':
      '*':
        - INDICES_MONITOR
        - SIREN_COMPOSITE
        - 'indices:admin/siren/connector/*'
        - 'indices:data/siren/connector/get'
        - 'indices:data/siren/connector/mappings/get'
        - 'indices:admin/get'

# Permissions for a Investigate regular user.
sirenuser:
  cluster:
    - SIREN_CLUSTER
  indices:
    'watcher_alarms*':
      '*':
        - SIREN_READONLY
    'data-*':
        - SIREN_READONLY
    'db-*':
        - SIREN_READONLY
    '*':
      '*':
        - SIREN_COMPOSITE

# Permissions for a Siren Alert user.
sirenalert:
  cluster:
    - 'indices:data/write/bulk'
    - 'indices:admin/template/*'
    - SIREN_CLUSTER
  indices:
    '*':
      '*':
        - SIREN_READONLY
    'watcher_alarms*':
      '*':
        - SIREN_READWRITE
        - CREATE_INDEX

----

A permission is defined by the following syntax:

[source,yaml]
----
<username>:
  <indices or cluster>:
    '<index name or regular expression>':
      '<type name or regular expression>':
        - <list of permissions or action group names>
----

The index name can contain the simple expansion characters `*` and `?` to match
any sequence of character/any single character; for further information about
defining permissions, please refer to the
{searchguard-ref}configuration_roles_permissions.html[Search Guard configuration
documentation].

The sample configuration above defines the following roles:

- **sg_all_access**: allows every action on the cluster.
- **sg_readall**: allows to search data on all the indices in the cluster.
- **logstash**: defines the permission for a Logstash client with all write and
  creation privileges enabled on Logstash and Elastic Beats templates and
  indices.
- **monitoring**: defines the permissions for an X-Pack monitoring agent.
- **sirenserver**: defines the permissions for the {kibi-name} server process,
  with read/write access to the internal {kibi-name} indices.
- **sirenuser**: defines the permissions for a {kibi-name} user with readonly
  access to all indices whose name starts with `data-*` and to the Siren Alert
  alarm history (indices whose name starts with `watcher_alarms*`).
- **sirenadmin**: defines the permissions for a {kibi-name} user that has the
  same permissions as **sirenuser** and in addition can create virtual indices
  whose name starts with `db`. This user has also additional permissions to
  upload the Investigate license, get monitoring information from the cluster
  and managed JDBC datasources.
- **sirenalert**: defines the permission for the Siren Alert user; this role
  has read access to all indices and is also authorized to create, search and
  delete indices whose name starts with `watcher_alarms*` (the alarm history).

**Users (sg_internal_users.yml)**

[source,yaml]
----
# Internal user database
# The hash value is a bcrypt hash and can be generated with plugin/tools/hash.sh
admin:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
federateserver:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
sirenserver:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
sirenadmin:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
sirenuser:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
logstash:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
CN=demouser:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
sirenalert:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
----

The file defines the credentials for Search Guard internal users; passwords are
stored as hashes in the `hash` attribute beneath each username.

The password for all the accounts in the example is `password`.

To change the password of a user, you will need to generate the corresponding
hash; this can be done by executing the `plugins/search-guard-5/tools/hash.sh`
script as follows:

[source,bash]
----
$ bash plugins/search-guard-5/tools/hash.sh -p password
----

The script will output the hash for the password specified after the `-p`
switch.

It is also possible to change passwords for internal users from the Access
Control application in the {kibi-name} UI once configured.

**Role mappings (sg_roles_mapping.yml)**

[source,yaml]
----
sg_all_access:
  users:
    - admin

federateserver:
  users:
    - federateserver

sirenserver:
  users:
    - sirenserver

sirenadmin:
  users:
    - sirenadmin

sirenuser:
  users:
    - sirenuser

sirentransport:
  users:
    - 'CN=demouser'

logstash:
  users:
    - logstash

sirenalert:
  users:
    - sirenalert
----

The file defines the assignment of roles to users; users authenticating through
a client certificate are identified by the Distinguished Name in the certificate.

===== Uploading the configuration to the cluster

To upload the configuration defined in the previous steps, go to the
Elasticsearch directory and execute the
`plugins/search-guard-5/tools/sgadmin.sh` script as follows:

[source,bash]
----
$ bash plugins/search-guard-5/tools/sgadmin.sh \
  -cd config/sgconfig \
  -cn siren-distribution \
  -ts config/truststore.jks \
  -tspass password \
  -ks ../siren-investigate/pki/searchguard/CN\=sgadmin-keystore.jks \
  -kspass password \
  -h localhost \
  -p 9330 \
  -nhnv
----

To reload the configuration you have to use the same same command with the
`-rl` flag instead of `-cd`, e.g.:

[source,bash]
----
$ bash plugins/search-guard-5/tools/sgadmin.sh \
  -rl
  -cn siren-distribution \
  -ts config/truststore.jks \
  -tspass password \
  -ks ../siren-investigate/pki/searchguard/CN\=sgadmin-keystore.jks \
  -kspass password \
  -h localhost \
  -p 9330 \
  -nhnv
----

You will need to specify the following arguments based on your environment
configuration:

- **-cd**: the path to the directory containing the Search Guard access control
  configuration.
- **-cn**: the name of the Elasticsearch cluster.
- **-ts**: the path to the truststore file.
- **-tspass**: the password of the truststore file.
- **-ks**: the path to the administrative client certificate keystore.
- **-kspass**: the password of the client certificate keystore file.
- **-h**: the hostname of a node in the cluster.
- **-p**: the transport port of the node specified in the **-h** option.
- **-nhnv**: disables host name verification; remove this option if you installed
  node certificates with the correct hostname (recommended in production).
- **-rl**: reloads the configuration and flushes the internal cache.

By default the number of replicas for the `searchguard` index will be set at
creation time to the number of data nodes - 1.

For additional information on how to set replication settings and sgadmin in
general please refer to the {searchguard-ref}sgadmin.html[sgadmin
documentation].

If the command executes successfully it will print a summary of the actions
executed, e.g.:

----
Clustername: elasticsearch
Clusterstate: YELLOW
Number of nodes: 1
Number of data nodes: 1
searchguard index does not exists, attempt to create it ... done
Populate config from /elasticsearch/sg_config
Will update 'config' with sg_config/sg_config.yml
   SUCC: Configuration for 'config' created or updated
Will update 'roles' with sg_config/sg_roles.yml
   SUCC: Configuration for 'roles' created or updated
Will update 'rolesmapping' with sg_config/sg_roles_mapping.yml
   SUCC: Configuration for 'rolesmapping' created or updated
Will update 'internalusers' with sg_config/sg_internal_users.yml
   SUCC: Configuration for 'internalusers' created or updated
Will update 'actiongroups' with sg_config/sg_action_groups.yml
   SUCC: Configuration for 'actiongroups' created or updated
Done with success
----

You can then verify that SSL and authentication are enabled by making an
authenticated request with wget, e.g.:

[source,shell]
----
$ wget --ca-certificate=../siren-investigate/pki/searchguard/ca.pem --http-user=sirenserver --http-password=password -qO - https://localhost:9220
----

To display information about the certificate as seen by a client you can
execute the following command:

[source,shell]
----
$ echo | openssl s_client -servername localhost -connect localhost:9220 -showcerts | openssl x509 -text -inform pem -text -noout
----

[investigate-access-control-config]
=== {kibi-name} access control configuration

Edit `config/investigate.yml` and specify the credentials of the **sirenserver**
user, e.g.:

[source,yaml]
----
elasticsearch.username: 'sirenserver'
elasticsearch.password: 'password'
----

If HTTPS is enabled for the Elasticsearch REST API, make sure that the
`elasticsearch.url` setting contains a URL starting with `https`, e.g.:

[source,yaml]
----
elasticsearch.url: 'https://localhost:9220'
----

If the certificate is not signed by a public authority, you will also need to
set the `elasticsearch.ssl.certificateAuthorities` to the path of the CA chain
bundle in PEM format, e.g.:

[source,yaml]
----
elasticsearch.ssl.certificateAuthorities: 'pki/searchguard/ca.pem'
----

If you're using the certificates generated by the TLS generator service, the
PEM file containing the certification bundles is available in
**root-ca/root-ca.pem**.

To enable certificate verification, set `elasticsearch.ssl.verificationMode` to
`full`, e.g.:

[source,yaml]
----
elasticsearch.ssl.verificationMode: full
----

Set the **investigate_core.elasticsearch.auth_plugin** option to **searchguard**:

----
investigate_core:
  elasticsearch:
    auth_plugin: 'searchguard'
----

To enable the {kibi-name} access control plugin, specify the following configuration
values in the **investigate_access_control** section:

- **enabled**: set to **true** to enable the {kibi-name} access control plugin.
  Defaults to **false**.
- **backend**: the authentication backend installed in the cluster; valid
  values are **searchguard** and **xpack**. Defaults to **searchguard**.
- **cookie.secure**: if set to **true**, the cookie will be transmitted only if
  the request is being served over HTTPS. You will need to set this to false if
  {kibi-name} is behind an SSL proxy or if you are running {kibi-name} without
  HTTPS (which is not advised). Defaults to **true**.
- **admin_role**: the name role that will have access to the access control
  management UI . This user will not be subject to
  any permission check by Investigate, but will still be subject to
  permission checks when issuing queries to Elasticsearch.
  Defaults to **sirenadmin**.
- **acl.enabled**: set to true to disable access control on saved objects.
  Defaults to **false**.

Example minimal configuration:

[source,yaml]
----
investigate_access_control:
  enabled: true
  acl:
    enabled: true
  cookie:
    secure: true
    password: '12345678123456781234567812345678'
----

Additional configuration options:

- **session.ttl**: the lifetime of the session in milliseconds.
  If not set, the session will last as long as the session cookie is valid.
  Defaults to **3600000** (1 hour).
- **session.keepAlive**: if set to **true**, every time a request is
  received within the session lifetime, the session lifetime will be
  extended by **session.ttl**. Defaults to **true**.
- **cookie.password**: a 32 characters long alphanumeric string used to derive
  the key used to encrypt and sign cookies.
- **cookie.ttl**: the lifetime of the session cookie in milliseconds.  If not
  set, the cookie will expire when the browser is closed, which is the
  recommended setting. Please note that browsers might not remove session
  cookies when a tab is closed or even across restarts, so it is recommended to
  set **session.ttl** for additional protection. Defaults to **null**.
- **cookie.name**: the name of the session cookie. Defaults to **kac**.
- **acl.index**: the Elasticsearch index in which access control rules and
  saved objects metadata will be stored (**.sirenaccess** by default).

If {kibi-name} is running behind a reverse SSL proxy like Nginx, remember to
set **cookie.secure** to **false** otherwise the cookie will not be sent, e.g.:

[source,yaml]
----
investigate_access_control:
  enabled: true
  acl:
    enabled: true
  cookie:
    password: '12345678123456781234567812345678'
    secure: false
----

If you are using the Siren Alert plugin, you'll need to specify the Siren Alert
user credentials in the `investigate_access_control.sirenalert` section, e.g.:

[source,yaml]
----
investigate_access_control:
  enabled: true
  acl:
    enabled: true
  cookie:
    password: '12345678123456781234567812345678'
    secure: false
  sirenalert:
    elasticsearch:
      username: sirenalert
      password: password
----

If Siren Alert credentials are not specified, Siren Alert will use the backend
credentials to execute the watchers.

Restart {kibi-name} after changing the configuration file; if the configuration is
correct, you should see an authentication dialog when browsing to {kibi-name}.

._Authentication dialog_
image::images/access_control/login.png["Authentication dialog",align="center"]

=== Saved objects access control

{kibi-name} features an access control system on saved objects that allows to
filter dashboards and visualizations visible to end users; this was enabled in
the previous section by setting `investigate_access_control.acl.enabled` to
`true`.

When the system is enabled, normal users should not have access to the `.siren`
and `.sirenaccess` indices, as these will be managed by the backend user
(`.sirenserver`).

=== Search Guard management UI Setup

{kibi-name} includes an optional user interface for the
{searchguard-management-api-ref}[Search Guard REST Management API add-on] ; in
order to use it, the {kibi-name} backend has to connect to the Elasticsearch
cluster using a PEM client certificate with administrative privileges.

==== Add-on installation

To install the Search Guard REST Management API add-on it is required
to download the correct jar for your Elasticsearch / Search Guard version
from {searchguard-management-api-ref}[this page]
and copy it to the `plugins/search-guard-5` directory of each node in the
cluster.

To access the API it is required to use a client certificate with
administrative privileges; to enable optional client certificate authentication
on the REST interface, ensure that the following option is present in
`elasticsearch.yml`:

[source,yaml]
----
searchguard.ssl.http.clientauth_mode: OPTIONAL
----

Once the plugin has been copied and the configuration updated, the nodes
must be restarted; a rolling restart is enough to install the add-on.

NOTE: When using this add-on, make sure that the sgadmin configuration directory
contains only the `sg_config.yml` file, otherwise sgadmin will replace users,
roles, action groups and mappings that might have been modified through the
API.

==== {kibi-name} configuration

Copy the client certificate and its key to a directory readable by {kibi-name}
(e.g. `pki`); then add the following parameters to the
`investigate_access_control` configuration section:

- **admin_role**: the Search Guard role that has access to the Search Guard
  management UI (**sirenadmin** by default).
- **backends.searchguard.admin.ssl.cert**: the path to the administrative
  client certificate bundle in PEM format.
- **backends.searchguard.admin.ssl.key**: the path to the administrative client
  certificate key in PEM format.
- **backends.searchguard.admin.ssl.keyPassphrase**: the passphrase of the
  administrative client certificate key. Not required if the key is not
  encrypted.

E.g.:

[source,yaml]
----
investigate_access_control:
investigate_access_control:
  enabled: true
  acl:
    enabled: true
  admin_role: sirenadmin
  cookie:
    password: '12345678123456781234567812345678'
    secure: false
  backends:
    searchguard:
      admin.ssl.cert: pki/searchguard/CN=sgadmin.crtfull.pem
      admin.ssl.key: pki/searchguard/CN=sgadmin.key.pem
      admin.ssl.keyPassphrase: password
----

Please note that the administrative client certificate bundle must contain
both the full CA chain and the client certificate; if using certificates generated
by the TLS generation service, the file name will be `CN=sgadmin.crtfull.pem`,
otherwise it is possible to generate the bundle manually by using cat, e.g.:

[source,bash]
----
$ cat user.crt.pem ca-chain.pem > user.crtfull.pem
----

[[access_control_app]]
==== Access Control: Authentication UI

Once the certificate is setup, restart {kibi-name}, login with a user having an
administrative role, click on the apps button, then click on **Access control**
and finally on **Authentication**.

._The Access control app_
image::images/access_control/acl_app_5.png["The Access control app",align="center"]

The Authentication section allows to browse, edit and create the following
Search Guard resources:

- Internal users
- Roles
- Role mappings
- Action groups

To verify that the application is working correctly, click on **Roles**
then click on the *Open* button; you should see the list of roles defined
during the initial Search Guard setup or an authorization error if the
certificate is incorrect:

._Browsing Search Guard roles_
image::images/access_control/sgroles_5.png["Browsing Search Guard roles",align="center"]

If you get an error upon opening the Authentication app, most probably the
client certificate does not contain the full CA chain or the add-on has not
been installed correctly; please check Elasticsearch and {kibi-name} logs for
related errors.

If you experience a {kibi-name} crash when opening the application, ensure that
the option
`investigate_access_control.backends.searchguard.admin.ssl.keyPassphrase` is
set to the correct password.

==== Access Control: ACL UI

._The ACL section_
image::images/access_control/acl_section_5.png["The ACL section",align="center"]

The ACL Roles panel in the ACL section allows to define {kibi-name} roles, which
are collections of permissions on saved objects and UI elements.
The main purpose of this system is to hide and block access to:

 * UI elements - applications, e.g.: **Timelion**, **Access control**, **Siren Alert**
 * UI elements - specific functionalities e.g.: **export CSV feature**
 * UI elements - {kibi-name} sections, e.g.: **discover**, **management**
 * Saved objects on unauthorized indices, e.g.: **dashboards**, **searches**

to end users and avoid unauthorized changes to configuration objects or use
of certain parts of the system.

There are two kinds of rules:

 * rules - to set permissions for saved objects
 * ui rules - to set permissions to view different UI elements

The `everyone` role defines permissions for all the users in the system, and is
mapped by default to any user logged in {kibi-name}; by default it grants all users
read only access to the {kibi-name} configuration (**Advanced settings**), saved
searches and index patterns as well as permission to view all applications and UI elements.

._The everyone role_
image::images/access_control/everyone_role.png["The everyone role",align="center"]

Denying access to certain saved objects like **saved search** using the first sets
of rules is usually transparent to the user which means that he will simply
not see the objects anywhere in {kibi-name}.

Usually it is not required to create explicit UI rules for the **dashboard** application
as access to specific dashboards can be restricted through saved object rules.

Denying access to an application like **Timelion**
or a {kibi-name} section like **management** will hide the navigation menu elements,
block access at the route level and display an error.

._Blocked Timelion application and {kibi-name} management section_
image::images/access_control/blocked_timelion_and_management_uirules.png["Blocked Timelion application and {kibi-name} management section",align="center"]

When the user tries to access **app/timelion**, the error below is shown.

._Blocked Timelion error_
image::images/access_control/blocked_timelion_error.png["Blocked timelion error",align="center", width="800"]

When the user tries to access **/app/kibana#/management**, the error below is shown.

._Blocked {kibi-name} management section error_
image::images/access_control/blocked_management_error.png["Blocked {kibi-name} management section error",align="center", width="800"]

For most setups it makes sense to grant **view** permissions on visualizations
as well, then set specific permissions on dashboards and dashboard groups for
each role.

To define a new role, click on the **Create role** button, then set the
following parameters:

- **Role ID**: the ID of the role (e.g. `sirenuser`); must be a lowercase
  alphanumeric string.
- **Backend roles**: a list of Search Guard roles that will be mapped to this
  {kibi-name} role (e.g. `sirenuser`)
- **Rules**: a list of rules on saved object types.

Each rule is defined by three parameters:

- **Action**: allow or deny
- **Permission**: the permission to allow or deny
- **Context**: the saved object type on which the permission must be enforced.

._The Create role button_
image::images/access_control/create_role_button_5.png["The Create role button",align="center"]

._Saving a role_
image::images/access_control/saving_role_5.png["Saving a role",align="center"]

==== Object permissions

In addition to role level permissions, it is possible to define permissions
on specific objects by visiting **Settings > Objects** and clicking on the
permissions button next to an object:

._The object permissions button_
image::images/access_control/object_perms_button_5.png["The object permissions button",align="center"]

The object permissions form allows to set the owner of the object and custom
access rules.

By default the owner is set to the user that created the object; the owner has
all permissions on the created object; it is possible to unset the owner of an
object by leaving the field blank and clicking on the Save button.

Custom access rules can be used to grant access to an object that would be
otherwise hidden; for example, if `everyone` is not granted to display
dashboards but you want to display the `Overview` dashboard to all users, visit
the object permissions form for the `Overview` dashboard and set the `View`
permission for `everyone` to `Allow`.

If `everyone` can see dashboards but you'd like to hide the `IT` dashboard to
users, set the `View` permission for `everyone` to `Deny`.

._The object permissions form_
image::images/access_control/object_permissions.png["The object permissions form",align="center"]

==== Notes

Although users are not allowed to view or edit the following types unless they
have permission to do so, they will be retrieved and executed by the backend if
used by a visualization:

- Query
- Query templates
- Data source

=== Logstash configuration

To enable authentication in Logstash, set the following parameters in the
**output.elasticsearch** section:

- **user**: the username of the user having the logstash role.
- **password**: the password of the user having the logstash role.
- **ssl**: set to true to enable SSL.
- **truststore**: the path to the CA truststore file.
- **truststore_password**: the password of the CA truststore file.

E.g.:

[source]
----
output {
    elasticsearch {
       hosts => ['localhost:9220']
       user => logstash
       password => password
       ssl => true
       truststore => '/etc/pki/logstash/truststore.jks'
       truststore_password => password
    }
}
----

The truststore file must be copied on all nodes running Logstash.

=== Beats configuration

To enable authentication in a beat which connects directly to Elasticsearch,
set the following parameters in the **output.elasticsearch** section:

- **protocol**: set to _https_.
- **username**: the username of the user having the logstash role.
- **password**: the password of the user having the logstash role.
- **tls.certificate_authorities**: an array containing the path to the CA
  truststore file in PEM format.

E.g.:

[source,yaml]
----
output:

  elasticsearch:
    hosts: ['localhost:9220']

    protocol: 'https'
    username: 'logstash'
    password: 'password'

    tls:
      certificate_authorities: ['/etc/pki/filebeat/ca.pem']
----

The root certification authority in PEM format must be copied to all nodes
running one or more beats.

=== Console configuration

In order to successfully submit queries from console to a cluster secured by
Search Guard set the following parameters in `config/investigate.yml`:

[source,yaml]
----
console.proxyConfig:
  - match:
      protocol: 'https'

    ssl:
      ca: 'pki/searchguard/ca.pem'
----

`console.proxyConfig.ssl.ca` must point to the CA certificate bundle, so it can
be set to the same value as the `elasticsearch.ssl.ca` parameter.

=== X-Pack monitoring configuration

In order to store monitoring data in a cluster secured by Search Guard it is
required to configure agent exporters to submit data over an authenticated
HTTPS connection.

The exporter configuration in `elasticsearch.yml` must include the following
parameters:

- `type`: `http`.
- `host`: an array of URLs that will be contacted by the exporter.
- `auth.username`: the username of the Marvel agent user.
- `auth.password`: the password of the Marvel agent user.
- `ssl.truststore.path`: the path to the CA certificate truststore (this will
  usually be the same as the one specified in the Search Guard configuration).
- `ssl.truststore.password`: the password of the CA certificate truststore.

For example, the following configuration defines an exporters which sends data
to the cluster at `https://localhost:9220`, authenticating as the `monitoring`
user:

[source,yaml]
----
xpack.monitoring.exporters:
  id1:
    type: http
    host: ['https://localhost:9220']

    auth:
      username: monitoring
      password: password

    ssl:
      truststore.path: truststore.jks
      truststore.password: password
----

=== Handling of authorization errors

If a dashboard is configured on an index on which you have no permission, all
the visualizations loading data from the index will be empty and the custom
warning message will be displayed at the top of the screen; in addition, the
document count for the dashboard will display the message *Unauthorized*.

If a dashboard is configured on an index on which you have permission to see
only a subset of documents or fields, the visualizations will only process and
display the data you're authorized to view.

._A visualizations that loads unauthorized data._
image::images/authorization-visualization-error.png["A visualization that loads unauthorized data.",align="left"]

._A visualizations that refers to an unauthorized index._
image::images/authorization-visualization-empty.png["A visualization that refers to an unauthorized index.",align="left"]

=== X-Pack security integration

Create a `sirenserver` role with the following definition and map it
to a `sirenserver` user:

[source, json]
----
{
  "cluster": [ 
    "cluster:admin/plugin/siren/license/get",
    "monitor"
  ],
  "indices" : [
    {
      "names" : [ "*" ],
      "privileges" : [ "indices:admin/get" ]
    },
    {
      "names" : [ ".siren" ],
      "privileges" : [ "all" ]
    },
    {
      "names" : [ ".sirenaccess" ],
      "privileges" : [ "all" ]
    }
  ]
}
----

If using a custom configuration, replace the configuration index name (`.siren`
by default) and access control index name (`.sirenaccess` by default) with the
correct names.

Set `elasticsearch.username` and `elasticsearch.password` to the credentials
of the `sirenserver` user, e.g.:

[source,yaml]
----
elasticsearch.username: sirenserver
elasticsearch.password: password
----

If HTTPS is enabled for the Elasticsearch REST API, make sure that the
`elasticsearch.url` setting contains a URL starting with `https`, e.g.:

[source,yaml]
----
elasticsearch.url: 'https://localhost:9220'
----

If the certificate is not signed by a public authority, you will also need to
set the `elasticsearch.ssl.certificateAuthorities` to the path of the CA chain
bundle in PEM format, e.g.:

[source,yaml]
----
elasticsearch.ssl.certificateAuthorities: 'pki/searchguard/ca.pem'
----

To enable certificate verification, set `elasticsearch.ssl.verificationMode` to
`full`, e.g.:

[source,yaml]
----
elasticsearch.ssl.verificationMode: full
----

Set the **investigate_core.elasticsearch.auth_plugin** option to `xpack`:

----
investigate_core:
  elasticsearch:
    auth_plugin: xpack
----

Then, set the backend parameter of the `investigate_access_control` section of
the `investigate.yml` to `xpack`:

[source,yaml]
----
investigate_access_control:
  enabled: true
  backend: xpack
  acl:
    enabled: true
  cookie:
    secure: true
    password: '12345678123456781234567812345678'
----

For a complete description of the options, see
<<investigate-access-control-config>>.

All users with access to {kibi-name} should have the following role definition:

Example standard user role with access to all indices starting with `data-` and
to all virtual indices starting with `db-`:

[source, json]
----
{
  "cluster": [
    "cluster:admin/plugin/siren/license/get",
    "cluster:siren/internal"
  ],
  "indices" : [
    {
      "names" : [ "*" ],
      "privileges" : [ "indices:siren/mplan" ]
    },
    {
      "names" : [ "data-*" ],
      "privileges" : [
        "read",
        "view_index_metadata",
        "indices:data/read/search-join"
        "indices:siren",
        "indices:admin/version/get",
        "indices:admin/get"
      ]
    },
    {
      "names" : [ "db-*" ],
      "privileges" : [
        "read",
        "view_index_metadata",
        "indices:data/read/search-join"
        "indices:data/siren",
        "indices:siren/plan",
        "indices:admin/version/get",
        "indices:admin/get"
      ]
    }
  ]
}
----

Example administrative user with access to all indices starting with `data-`,
to all virtual indices starting with `db-`, license management, and permission
to manage external datasources and virtual indices starting with `db-`:

[source,yaml]
----
{
  "cluster": [
    "cluster:admin/plugin/siren/license",
    "cluster:admin/siren/connector",
    "cluster:siren/internal",
    "manage"
  ],
  "indices" : [
    {
      "names" : [ "*" ],
      "privileges" : [ "indices:siren/mplan" ]
    },
    {
      "names" : [ "data-*" ],
      "privileges" : [
        "read",
        "view_index_metadata",
        "indices:data/read/search-join"
        "indices:siren",
        "indices:admin/version/get",
        "indices:admin/get"
      ]
    },
    {
      "names" : [ "db-*" ],
      "privileges" : [
        "read",
        "create_index",
        "view_index_metadata",
        "indices:data/read/search-join"
        "indices:data/siren",
        "indices:siren",
        "indices:admin/version/get",
        "indices:admin/get",
        "indices:admin/siren/connector"
      ]
    }
  ]
}
----

For additional information on datasources configuration, please check the
<<jdbc_datasources>> section.
