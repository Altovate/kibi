[[searchguard_integration]]

== Search Guard Integration and Kibi access control

This section offers an overview of how to integrate Search Guard with Kibi; for
further reference and detailed options please consult the
{searchguard-ref}/blob/master/README.md[Search Guard documentation].

Before proceeding, make sure that:

- Kibi is either running with HTTPS enabled or behind a reverse SSL proxy.
- The Gremlin Server is running with HTTPS enabled.

Please refer to the <<access_control,Authentication and access control>>
section for instructions on how on to enable HTTPS in both components.

=== SSL Certificates

All the Elasticsearch nodes in a cluster secured by Search Guard are required
to use SSL to encrypt all network traffic.

In addition, changing the Search Guard configuration requires the use
of a client SSL certificate to perform administrative actions.

To setup a Search Guard cluster, you will need to generate the following files:

- A **truststore** file, common to all nodes, containing the CA certificate
  chain.
- A **keystore** file, for each node, containing the certificate bundle for
  the node.
- A **keystore** file, for each administrative user, containing a certificate
  bundle that identifies the user.
- A **keystore** file containing an SSL certificate for the Elasticsearch HTTP
  REST API.

These files can be either Java KeyStore files or PKCS12 bundles.

==== Sample certificates

The Kibi  demo distribution includes the following sample certificates in the
_elasticsearch/config_ directory:

- **truststore.jks**: a sample CA certificate chain.
- **CN=localhost-keystore.jks**: a certificate for the bundled Elasticsearch
  node, used for both transport and REST API encryption.

The password of all Java keystores is `password`.

In addition, the following certificates are included in the
_kibi/pki/searchguard_ directory:

- **CN=sgadmin.crtfull.pem**: a certificate bundle
  with administrative privileges over the Search Guard Management REST API.
- **CN=sgadmin.key.pem**: the key of the administrative certificate.
- **ca.pem**: the cluster CA certificate chain in PEM format.

==== Issuing certificates in an existing PKI infrastructure

If your organization has a PKI infrastructure in place, you can generate
Java KeyStore files from a PEM bundle by using the _keytool_ command from
the Java runtime, e.g.:

[source,shell]
----
$ keytool  \
  -importcert \
  -file ca.pem  \
  -keystore truststore.jks
----

The command will store the contents of the PEM bundle _ca.pem_ into a file
named _truststore.jks_ in the current directory.

The same command can be used to convert certificates signed by your CA for
nodes, administrative users and the REST API.

Node certificates must include _oid:1.2.3.4.5.5_ as a Subject Alternative Name
entry to work correctly with Search Guard; if you want to enable hostname
verification, make sure that at least one Subject Alternative Name is equal to
the DNS name of the node.

Client certificates for administrative users must contain a unique
Distinguished Name to identify the user, e.g.:

----
CN=admin,DC=siren,DC=solutions
----

Certificates for the REST API can be shared across multiple nodes by setting
multiple hostnames in the Subject Alternative Name attribute or by using a
wildcard certificate.

==== Issuing certificates using the TLS certificate generator

Floragunn GmbH provides a TLS certificate generation service at
https://floragunn.com/tls-certificate-generator/ which can be used to create
a bundle of certificates for evaluation purposes.

To try the certificates in a single node setup, it is possible to just
specify **localhost** as the first hostname and submit the form.

The bundle has the following contents:

- **README.txt**: provides an overview of the bundle and the passwords for all
  the keystores.
- **truststore.jks**: the CA certificate chain in Keystore format.
- **node-certificates**: the transport certificates for the nodes in several formats;
  these certificates can also be used for the Elasticsearch REST API.
- **client-certificates**: client certificates.
- **root-ca**: the root CA bundle in PEM format.
- **signing-ca**: the signing CA bundle in PEM format.

=== Search Guard installation

Install the *search-guard-5* plugin on each node in the
Elasticsearch cluster by changing to the node directory and running the
commands below; to find the most recent version of the plugins for your
Elasticsearch version please consult the
{searchguard-matrix-ref}[Search Guard version matrix].

[source,shell]
----
$ bin/elasticsearch-plugin install -b com.floragunn:search-guard-5:<version>
----

Then, copy the following files to the _config_ directory of each node:

- The truststore file (e.g. _truststore.jks_).
- The keystore file containing the node certificate (e.g.
  _CN=localhost-keystore.jks_)
- The keystore file containing the certificate for the Elasticsearch REST API
  if different than the node certificate.

Open the _config/elasticsearch.yml_ file and set the following Search Guard
options:

**Node to node transport options:**

- **searchguard.ssl.transport.enabled**: needs to be set to **true** for Search
  Guard to work.
- **searchguard.ssl.transport.keystore_filepath**: the filename of the keystore
  file that contains the node certificate.
- **searchguard.ssl.transport.keystore_password**: the password of the keystore
  file that contains the node certificate.
- **searchguard.ssl.transport.truststore**: the filename of the truststore file
  that contains the root certificate chain.
- **searchguard.ssl.transport.truststore_password**: the password of the
  truststore file that contains the root certificate chain.
- **searchguard.ssl.transport.enforce_hostname_verification**: set to **true**
  to enable hostname verification, **false** otherwise.

**REST API options:**

- **searchguard.ssl.http.enabled**: set to **true** to enable SSL on the HTTP
  interface.
- **searchguard.ssl.http.keystore_filepath**: the filename of the keystore
  file that contains the certificate for the HTTP interface.
- **searchguard.ssl.http.keystore_password**: the password of the keystore
  file that contains the certificate for the HTTP interface.
- **searchguard.ssl.http.truststore**: the filename of the truststore file
  that contains the root certificate chain for the HTTP certificate.
- **searchguard.ssl.http.truststore_password**: the password of the truststore file
  that contains the root certificate chain for the HTTP certificate.

**Administrative user options:**

- **searchguard.authcz.admin_dn**: a list of Distinguished Names in SSL client
  certificates which are authorized to submit administrative requests.

**Client certificate authentication options:**

- **searchguard.ssl.http.clientauth_mode**: set to `OPTIONAL` to enable optional
client certificate authentication on the REST endpoint.

E.g.:

[source,yaml]
----
searchguard.ssl.transport.enabled: true
searchguard.ssl.transport.truststore_filepath: truststore.jks
searchguard.ssl.transport.truststore_password: password
searchguard.ssl.transport.keystore_filepath: CN=localhost-keystore.jks
searchguard.ssl.transport.keystore_password: password
searchguard.ssl.transport.enforce_hostname_verification: false
searchguard.ssl.http.enabled: true
searchguard.ssl.http.keystore_filepath: CN=localhost-keystore.jks
searchguard.ssl.http.keystore_password: password
searchguard.ssl.http.truststore_filepath: truststore.jks
searchguard.ssl.http.truststore_password: password
searchguard.authcz.admin_dn:
  - CN=sgadmin
searchguard.ssl.http.clientauth_mode: OPTIONAL
----

NOTE: Make sure that all the files in the configuration directory and the
certificate files are readable only by the user running Elasticsearch.

Start Elasticsearch:

[source,shell]
----
$ bin/elasticsearch
----

If either a certificate or a password is incorrect, Elasticsearch will not
start.

=== Access control configuration

Access control configuration (users, roles and privileges) is stored in an
Elasticsearch index which can be modified through the _sgadmin.sh_ script.

The script reads the configuration from a local directory containing YAML files
and uploads it to the index; the request is authenticated through a client SSL
certificate.

Once the configuration has been uploaded, it will be available to all the nodes
in the cluster, so it is not necessary to copy the Search Guard configuration
directory to all the Elasticsearch nodes, just on the node from where sgadmin
is run.

`sgadmin.sh` is available in the _plugins/search-guard-2/tools_ directory in
each Elasticsearch instance in which Search Guard has been installed; a
standalone version (`sgadmin-standalone.zip`) can be downloaded from
{searchguard-sgadmin-ref}[this page].

Once a Search Guard enabled cluster has been initialized, `sgadmin` can be used
to upload new configurations.

==== Search Guard configuration

A Search Guard configuration directory contains the following files:

- **sg_config.yml**: contains the general configuration.
- **sg_action_groups.yml**: contains named groups of permissions.
- **sg_roles.yml**: contains the definition of roles.
- **sg_internal_users.yml**: the Search Guard internal users database.
- **sg_roles_mapping.yml**: contains the mapping between users and roles.

A sample configuration is available in the _config/sgconfig_ directory in the
Elasticsearch instance included in the demo distribution; the contents of the
files are explained in the next sections and can be used as a general
guideline.

For additional configuration options please refer to the official
{searchguard-ref}/blob/master/README.md[Search Guard documentation].

**General configuration (sg_config.yml)**

[source,yaml]
----
searchguard:
  dynamic:
    http:
      anonymous_auth_enabled: false
      xff:
        enabled: false
    authc:
      transport_auth_domain:
        enabled: true
        order: 2
        http_authenticator:
          type: basic
        authentication_backend:
          type: internal
      basic_internal_auth_domain:
        enabled: true
        http_authenticator:
          type: basic
          challenge: true
        authentication_backend:
          type: intern
----

The _sg_config.yml_ file contains the configuration of the authentication
mechanisms and backends; the above configuration:

- Disables the anonymous role (_anonymous_auth_enabled: false_)
- Disables support for external proxies (_xff.enabled: false_)
- Enables HTTP basic authentication on the internal Search Guard user database.

**Action groups (sg_action_groups.yml)**

[source,yaml]
----
UNLIMITED:
  - "*"

###### INDEX LEVEL ######

INDICES_ALL:
  - "indices:*"

# for backward compatibility
ALL:
  - INDICES_ALL

MANAGE:
  - "indices:monitor/*"
  - "indices:admin/*"

CREATE_INDEX:
  - "indices:admin/create"
  - "indices:admin/mapping/put"

MANAGE_ALIASES:
  - "indices:admin/aliases*"

# for backward compatibility
MONITOR:
  - INDICES_MONITOR

INDICES_MONITOR:
  - "indices:monitor/*"

DATA_ACCESS:
  - "indices:data/*"
  - CRUD

WRITE:
  - "indices:data/write*"
  - "indices:admin/mapping/put"

READ:
  - "indices:data/read*"
  - "indices:admin/mappings/fields/get*"

DELETE:
  - "indices:data/write/delete*"

CRUD:
  - READ
  - WRITE

SEARCH:
  - "indices:data/read/search*"
  - "indices:data/read/msearch*"
  - "indices:siren/plan*"
  - "indices:siren/mplan*"
  - SUGGEST

SUGGEST:
  - "indices:data/read/suggest*"

INDEX:
  - "indices:data/write/index*"
  - "indices:data/write/update*"
  - "indices:admin/mapping/put"
  - "indices:data/write/bulk*"

GET:
  - "indices:data/read/get*"
  - "indices:data/read/mget*"

###### CLUSTER LEVEL ######

CLUSTER_ALL:
  - "cluster:*"

CLUSTER_MONITOR:
  - "cluster:monitor/*"

CLUSTER_COMPOSITE_OPS_RO:
  - "indices:data/read/mget"
  - "indices:data/read/msearch"
  - "indices:siren/mplan"
  - "indices:data/read/mtv"
  - "indices:admin/aliases/exists*"
  - "indices:admin/aliases/get*"

CLUSTER_COMPOSITE_OPS:
  - "indices:data/write/bulk"
  - "indices:admin/aliases*"
  - CLUSTER_COMPOSITE_OPS_RO

##### KIBI #####

KIBI_CLUSTER:
  - "indices:data/read/scroll"
  - "indices:data/read/scroll/clear"
  - "cluster:internal/data/transfer/*"
  - "indices:data/read/msearch*"
  - CLUSTER_COMPOSITE_OPS_RO

KIBI_COMPOSITE:
  - "indices:siren/mplan*"

KIBI_READONLY:
  - "indices:data/read/field_stats*"
  - "indices:data/read/field_caps*"
  - "indices:data/read/get*"
  - "indices:data/read/mget*"
  - "indices:data/read/search*"
  - "indices:siren/plan"
  - "indices:siren/task/search"
  - "indices:admin/mappings/get*"
  - "indices:admin/mappings/fields/get*"
  - "indices:admin/validate/query*"
  - "indices:admin/get*"
  - "indices:admin/version/get*"
  - KIBI_COMPOSITE

KIBI_READWRITE:
  - "indices:admin/exists*"
  - "indices:admin/mapping/put*"
  - "indices:admin/refresh*"
  - "indices:data/write/delete*"
  - "indices:data/write/index*"
  - "indices:data/write/update*"
  - KIBI_READONLY
----

This file contains named groups of permissions which can be used in the roles
configuration file; the above configuration includes Search Guard default
groups plus three Kibi specific groups:

- **KIBI_READWRITE**: groups all the permissions needed to search and update
  the main Kibi index (_.kibi_); the group has to be assigned on the main index
  to all roles that can modify the Kibi configuration.
- **KIBI_READONLY**: groups all the permissions needed to search any
  Elasticsearch index from Kibi. The group has to be assigned on all indices
  that a role has access to.
- **KIBI_CLUSTER**: sets the permission to read results from scrolling
  searches and send composite requests.
- **KIBI_COMPOSITE**: groups all the permissions to execute composite requests
  not recognized by Search Guard; the group has to be granted on all indices
  to roles that have access only to a subset of indices (e.g. kibinoinvestor).

**Roles (sg_roles.yml)**

[source,yaml]
----
# Allows any action on the cluster.
sg_all_access:
  cluster:
    - '*'
  indices:
    '*':
      '*':
        - '*'

# Allows reading data from all indices.
sg_readall:
  indices:
    '*':
      '*':
        - READ

# Permissions for a Logstash client.
logstash:
  cluster:
    - indices:admin/template/get
    - indices:admin/template/put
  indices:
    'logstash-*':
      '*':
        - CRUD
        - CREATE_INDEX
    '*beat*':
      '*':
        - CRUD
        - CREATE_INDEX

# Permissions for an X-Pack monitoring agent.
monitoring:
  cluster:
    - CLUSTER_MONITOR
    - 'indices:admin/aliases'
    - 'indices:admin/template/get'
    - 'indices:admin/template/put'
    - 'cluster:admin/ingest/pipeline/get'
    - 'cluster:admin/ingest/pipeline/put'
    - 'indices:data/write/bulk'
  indices:
    '?marvel*':
      '*':
        - ALL
    '?monitoring*':
      '*':
        - ALL

# Permissions for a Sentinl user.
sentinl:
  cluster:
    - KIBI_CLUSTER
    - "indices:data/write/bulk*"
    - "indices:admin/template/*"
  indices:
    '*':
      '*':
        - KIBI_READONLY
    'watcher_alarms*':
      '*':
        - KIBI_READWRITE
        - CREATE_INDEX
    '/(watcher|watcher_alarms)/':
      '*':
        - KIBI_READWRITE
        - CREATE_INDEX

# Permissions for the Kibi server process.
kibiserver:
  cluster:
    - cluster:admin/xpack/monitoring/bulk
    - cluster:monitor/nodes/info
    - cluster:monitor/xpack/info
    - cluster:monitor/health
    - cluster:monitor/main
    - cluster:monitor/state
    - cluster:monitor/nodes/stats
    - KIBI_CLUSTER
    - CLUSTER_COMPOSITE_OPS
  indices:
    '*':
      '*':
        - indices:admin/get
    '?kibi':
      '*':
        - ALL
    '?kibiaccess':
      '*':
        - ALL

# Permissions for a Kibi administrator (read-write access to the .kibi index).
kibiadmin:
  cluster:
    - KIBI_CLUSTER
    - cluster:admin/plugin/siren/license/put
  indices:
    '*':
      '*':
        - KIBI_READONLY
    '?kibi':
      '*':
        - KIBI_READWRITE
    'watcher':
      '*':
        - KIBI_READWRITE

# Permissions for a Kibi user (read only access to the .kibi index).
kibiuser:
  cluster:
    - KIBI_CLUSTER
  indices:
    '?kibi':
      '*':
        - KIBI_READONLY
    'watcher':
      '*':
        - KIBI_READONLY
    'watcher_alarms*':
      '*':
        - KIBI_READONLY
    'article':
      '*':
        - KIBI_READONLY
    'investment':
      '*':
        - KIBI_READONLY
    'company':
      '*':
        - KIBI_READONLY
    'investor':
      '*':
        - KIBI_READONLY
    '*':
      '*':
        - KIBI_COMPOSITE

# Permissions for a Kibi user (read only), with no access to the investor index.
kibinoinvestor:
  cluster:
    - KIBI_CLUSTER
  indices:
    '?kibi':
      '*':
        - KIBI_READONLY
    'article':
      '*':
        - KIBI_READONLY
    'company':
      '*':
        - KIBI_READONLY
    'investment':
      '*':
        - KIBI_READONLY
    '*':
      '*':
        - KIBI_COMPOSITE
----

The file defines the following roles:

- **sg_all_access**: allows every action on the cluster.
- **sg_readall**: allows to search data on all the indices in the cluster.
- **logstash**: defines the permission for a Logstash client with all write and
  creation privileges enabled on Logstash and Elastic Beats templates and
  indices.
- **sentinl**: defines the permission for a Sentinl user; the role is
  not required if the Sentinl plugin is not installed.
- **monitoring**: defines the permissions for an X-Pack monitoring agent.
- **kibiserver**: defines the permissions for the Kibi server process.
- **kibiadmin**: defines the permissions for a Kibi user with read/write
  access to the .kibi index.
- **kibiuser**: defines the permissions for a Kibi user with readonly access
  to all indices.
- **kibinoinvestor**: defines the permissions for a Kibi user with readonly
  access to all the indices excluding _investor_.

A permission is defined by the following syntax:

[source,yaml]
----
<username>:
  <indices or cluster>:
    '<index name or regular expression>':
      '<type name or regular expression>':
        - <list of permissions or action group names>
----

The index name can contain the simple expansion characters _*_ and _?_ to match
any sequence of character/any single character; for further information about
defining permissions, please refer to the
{searchguard-ref}/blob/master/configuration.md[Search Guard configuration
documentation].

**Users (sg_internal_users.yml)**

[source,yaml]
----
# Internal user database
# The hash value is a bcrypt hash and can be generated with plugins/searchguard-2/tools/hash.sh
admin:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibiserver:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibiadmin:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibiuser:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibinoinvestor:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
logstash:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
CN=demouser:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
sentinl:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
monitoring:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
----

The file defines the credentials for Search Guard internal users; passwords are
stored as hashes in the _hash_ attribute beneath each username.

The password for all the accounts above is _password_.

To change the password of a user, you will need to generate the corresponding
hash; this can be done by executing the _plugins/search-guard-2/tools/hash.sh_
script as follows:

[source,bash]
----
$ bash plugins/search-guard-2/tools/hash.sh -p password
----

The script will output the hash for the password specified after the _-p_
switch.

**Role mappings (sg_roles_mapping.yml)**

[source,yaml]
----
sg_all_access:
  users:
    - admin

kibiserver:
  users:
    - kibiserver

kibiadmin:
  users:
    - kibiadmin

kibiuser:
  users:
    - kibiuser

kibinoinvestor:
  users:
    - kibinoinvestor

logstash:
  users:
    - logstash

sentinl:
  users:
    - sentinl

monitoring:
  users:
    - monitoring
----

The file defines the assignment of roles to users; users authenticating through
a client certificate are identified by the Distinguished Name in the certificate.

===== Uploading the configuration to the cluster

To upload the configuration defined in the previous steps, go to the
Elasticsearch directory and execute the
_plugins/search-guard-2/tools/sgadmin.sh_ script as follows:

[source,bash]
----
$ bash plugins/search-guard-2/tools/sgadmin.sh \
  -cd config/sgconfig \
  -cn kibi-distribution \
  -ts config/truststore.jks \
  -tspass password \
  -ks ../kibi/pki/searchguard/CN\=sgadmin-keystore.jks \
  -kspass password \
  -h localhost \
  -p 9330 \
  -nhnv
----

To reload the configuration you have to use the same same command with the
`-rl` flag instead of `-cd`, e.g.:

[source,bash]
----
$ bash plugins/search-guard-2/tools/sgadmin.sh \
  -rl
  -cn kibi-distribution \
  -ts config/truststore.jks \
  -tspass password \
  -ks ../kibi/pki/searchguard/CN\=sgadmin-keystore.jks \
  -kspass password \
  -h localhost \
  -p 9330 \
  -nhnv
----

You will need to specify the following arguments based on your environment
configuration:

- **-cd**: the path to the directory containing the Search Guard access control
  configuration.
- **-cn**: the name of the Elasticsearch cluster.
- **-ts**: the path to the truststore file.
- **-tspass**: the password of the truststore file.
- **-ks**: the path to the administrative client certificate keystore.
- **-kspass**: the password of the client certificate keystore file.
- **-h**: the hostname of a node in the cluster.
- **-p**: the transport port of the node specified in the **-h** option.
- **-nhnv**: disables host name verification; remove this option if you installed
  node certificates with the correct hostname (recommended in production).
- **-rl**: reloads the configuration and flushes the internal cache.

By default the number of replicas for the `searchguard` index will be set at
creation time to the number of data nodes - 1.

For additional information on how to set replication settings and sgadmin in
general please refer to the {searchguard-ref}/blob/master/sgadmin.md[sgadmin
documentation].

If the command executes successfully it will print a summary of the actions
executed, e.g.:

----
Clustername: elasticsearch
Clusterstate: YELLOW
Number of nodes: 1
Number of data nodes: 1
searchguard index does not exists, attempt to create it ... done
Populate config from /elasticsearch/sg_config
Will update 'config' with sg_config/sg_config.yml
   SUCC: Configuration for 'config' created or updated
Will update 'roles' with sg_config/sg_roles.yml
   SUCC: Configuration for 'roles' created or updated
Will update 'rolesmapping' with sg_config/sg_roles_mapping.yml
   SUCC: Configuration for 'rolesmapping' created or updated
Will update 'internalusers' with sg_config/sg_internal_users.yml
   SUCC: Configuration for 'internalusers' created or updated
Will update 'actiongroups' with sg_config/sg_action_groups.yml
   SUCC: Configuration for 'actiongroups' created or updated
Done with success
----

You can then verify that SSL and authentication are enabled by making an
authenticated request with wget, e.g.:

[source,shell]
----
$ wget --ca-certificate=../kibi/pki/searchguard/ca.pem --http-user=kibiserver --http-password=password -qO - https://localhost:9220
----

To display information about the certificate as seen by a client you can
execute the following command:

[source,shell]
----
$ echo | openssl s_client -servername localhost -connect localhost:9220 -showcerts | openssl x509 -text -inform pem -text -noout
----

=== Kibi configuration

Edit _config/kibi.yml_ and specify the credentials of the **kibiserver**
user, e.g.:

[source,yaml]
----
elasticsearch.username: "kibiserver"
elasticsearch.password: "password"
----

If HTTPS is enabled for the Elasticsearch REST API, make sure that the
_elasticsearch.url_ setting contains a URL starting with _https_, e.g.:

[source,yaml]
----
elasticsearch.url: "https://localhost:9220"
----

If the certificate is not signed by a public authority, you will also need to
set the `elasticsearch.ssl.ca` to the path of the CA chain bundle in PEM
format, e.g.:

[source,yaml]
----
elasticsearch.ssl.ca: "pki/searchguard/ca.pem"
----

If you're using the certificates generated by the TLS generator service, the
PEM file containing the certification bundles is available in
**root-ca/root-ca.pem**.

To enable certificate verification, set _elasticsearch.ssl.verify_ to true,
e.g.:

[source,yaml]
----
elasticsearch.ssl.verify: true
----

Set the **kibi_core.elasticsearch.auth_plugin** option to **searchguard**:

----
kibi_core:
  elasticsearch:
    auth_plugin: "searchguard"
----

E.g.:

[source,yaml]
----
kibi_core:
  elasticsearch:
    auth_plugin: "searchguard"
----

To enable the Kibi access control plugin, specify the following configuration
values in the **kibi_access_control** section:

- **enabled**: set to **true** to enable the Kibi access control plugin.
  Defaults to **false**.
- **session.ttl**: the lifetime of the session in milliseconds.
  If not set, the session will last as long as the session cookie is valid.
  Defaults to **3600000** (1 hour).
- **session.keepAlive**: if set to **true**, every time a request is
  received within the session lifetime, the session lifetime will be
  extended by **session.ttl**.  Defaults to **true**.
- **cookie.password**: a 32 characters long password used to derive
  the key used to encrypt and sign cookies.
- **cookie.secure**: if set to **true**, the cookie will be transmitted
  only if the request is being served over HTTPS. It is possible to set this
  to false if Kibi is behind an SSL proxy. Defaults to **true**.
- **cookie.ttl**: the lifetime of the session cookie in milliseconds.  If not
  set, the cookie will expire when the browser is closed, which is the
  recommended setting. Please note that browsers might not remove session
  cookies when a tab is closed or even across restarts, so it is recommended to
  set **session.ttl** for additional protection. Defaults to **null**.
- **cookie.name**: the name of the session cookie. Defaults to **kac**.
- **admin_role**: the Search Guard role authorized to use the Kibi Access
  Control application. Defaults to **kibiadmin**.

E.g.:

[source,yaml]
----
kibi_access_control:
  enabled: true
  cookie:
    password: "12345678123456781234567812345678"
----

If Kibi is running behind a reverse SSL proxy like Nginx, remember to set
**cookie.secure** to **false** otherwise the cookie will not be sent, e.g.:

[source,yaml]
----
kibi_access_control:
  enabled: true
  cookie:
    password: "12345678123456781234567812345678"
    secure: false
----

If you are using the Sentinl plugin, you can specify the Sentinl user
credentials in the `kibi_access_control.sentinl` section, e.g.:

[source,yaml]
----
kibi_access_control:
  sentinl:
    elasticsearch:
      username: sentinl
      password: password
----

Restart Kibi after changing the configuration file; if the configuration is
correct, you should see an authentication dialog when browsing to Kibi.

._Authentication dialog_
image::images/access_control/login.png["Authentication dialog",align="center"]

=== Search Guard management UI

Kibi Enterprise include an optional user interface for the
{searchguard-management-api-ref}[Search Guard REST Management API add-on] ; in
order to use it, the Kibi backend has to connect to the Elasticsearch cluster
using a PEM client certificate with administrative privileges.

It is strongly suggested to setup a dedicated Kibi instance to use the
Search Guard management UI and allow access to it only to authorized
users.

==== Add-on installation

To install the Search Guard REST Management API add-on it is required
to download the correct jar for your Elasticsearch / Search Guard version
from {searchguard-management-api-ref}[this page]
and copy it to the `plugins/search-guard-2` directory of each node in the
cluster.

To access the API it is required to use a client certificate with
administrative privileges; to enable optional client certificate authentication
on the REST interface, ensure that the following option is present in
`elasticsearch.yml`:

[source,yaml]
----
searchguard.ssl.http.clientauth_mode: OPTIONAL
----

Once the plugin has been copied and the configuration updated, the nodes
must be restarted; a rolling restart is enough to install the add-on.

NOTE: When using this add-on, make sure that the sgadmin configuration directory
contains only the `sg_config.yml` file, otherwise sgadmin will replace users,
roles, action groups and mappings that might have been modified through the
API.

==== Kibi configuration

Copy the client certificate and its key to a directory readable by Kibi (e.g. `pki`); then
add the following parameters to the `kibi_access_control` configuration section:

- **admin_role**: the Search Guard role that has access to the Search Guard
  management UI (**kibiadmin** by default).
- **backends.searchguard.admin.ssl.cert**: the path to the administrative
  client certificate bundle in PEM format.
- **backends.searchguard.admin.ssl.key**: the path to the administrative client
  certificate key in PEM format.

E.g.:

[source,yaml]
----
kibi_access_control:
  admin_role: kibiadmin
  backends:
    searchguard:
      admin.ssl.cert: pki/searchguard/CN=sgadmin.crtfull.pem
      admin.ssl.key: pki/searchguard/CN=sgadmin.key.pem
----

Please note that the administrative client certificate bundle must contain
both the full CA chain and the client certificate; if using certificates generated
by the TLS generation service, the file name will be `CN=sgadmin.crtfull.pem`,
otherwise it is possible to generate the bundle manually by using cat, e.g.:

[source,bash]
----
$ cat user.crt.pem ca-chain.pem > user.crtfull.pem
----

Once the certificate is setup, restart Kibi, login with a user having an
administrative role, click on the apps button, then click on **Access control**
and finally on **Authentication**.

._The Access control app_
image::images/access_control/acl_app_5.png["The Access control app",align="center"]

If you get an error upon opening the Authentication app,
most probably the client certificate does not contain
the full CA chain or the add-on has not been installed correctly; please
check Elasticsearch and Kibi logs for related errors.

The Authentication section allows to browse, edit and create the following
Search Guard resources:

- Internal users
- Roles
- Role mappings
- Action groups

To verify that the application is working correctly, click on **Roles**
then click on the *Open* button; you should see the list of roles defined
during the initial Search Guard setup or an authorization error if the
certificate is incorrect:

._Browsing Search Guard roles_
image::images/access_control/sgroles_5.png["Browsing Search Guard roles",align="center"]

=== Saved objects access control

Kibi Enterprise features an access control system on saved objects that allows
to filter dashboards and visualizations visible to end users.

==== Setup

To enable this feature, set the following parameters in the `kibi_access_control`
configuration section:

- **admin_role**: the Search Guard role that can use the saved objects access
  control management UI (**kibiadmin** by default).
- **acl.enabled**: set to true to enable access control on saved objects.
- **acl.index**: the Elasticsearch index in which access control rules and
  saved objects metadata will be stored (**.kibiaccess** by default).

E.g.:

[source,yaml]
----
kibi_access_control:
  acl:
    enabled: true
----

Before restarting Kibi, it is required to allow the backend user (`.kibiserver`
by default) all permissions on the index set in
`kibi_access_control.acl.index`; for example, the following snippet from
`sg_roles.yml` grants all privileges to the `kibiserver` user on the
`.kibiaccess` index.

[source,yaml]
----
# Permissions for the Kibi server process.
kibiserver:
  cluster:
      - cluster:monitor/nodes/info
      - cluster:monitor/health
      - cluster:monitor/state
      - cluster:monitor/nodes/stats
      - KIBI_CLUSTER
  indices:
    '*':
      '*':
        - indices:admin/get
    '?kibi*':
      '*':
        - ALL
    '?kibiaccess':
      '*':
        - ALL
----

In addition, it is recommended to block access on the Kibi index (`.kibi` by
default) to users by adding the following permissions on the `null` type in
each user role:

- `indices:data/read/search`

E.g.:

[source, yaml]
----
kibiuser:
  cluster:
    - KIBI_CLUSTER
  indices:
    /(article|investment|company|investor)/:
      '*':
        - KIBI_READONLY
    watcher:
      '*':
        - KIBI_READONLY
    '*':
      '*':
        - KIBI_COMPOSITE
    watcher_alarms*:
      '*':
        - KIBI_READONLY
    '?kibi':
      'null':
        - 'indices:data/read/search'
        - 'indices:data/read/coordinate-search'
----

In this way, users will be able to include the Kibi index in msearch requests
(which is a performance requirement to avoid querying all indices when time based
index patterns are configured) but won't be able to read saved objects from it.

Roles can be updated either by modifying `sg_roles.yml` and uploading it
through `sgadmin` or by using the Search Guard management application; make
sure to set these rules on all Search Guard roles assigned to Kibi users.

Once roles are configured, restart Kibi; if permissions are configured correctly,
you will be see an **ACL** section in the **Access control** application.

._The ACL section_
image::images/access_control/acl_section_5.png["The ACL section",align="center"]

==== Kibi roles and rules

The ACL Roles panel in the ACL section allows to define Kibi roles, which
are collections of permissions on saved objects; the main purpose of this
system is to hide dashboards on unauthorized indices to end users and avoid
unauthorized changes to configuration objects.

The `everyone` role defines permissions for all the users in the system, and is
mapped by default to any user logged in Kibi; by default it allows all users
read only access to the Kibi configuration (**Advanced settings**), saved
searches and index patterns.

._The everyone role_
image::images/access_control/everyone.png["The everyone role",align="center"]

For most setups it makes sense to grant **view** permissions on visualizations
as well, then set specific permissions on dashboards and dashboard groups for
each role.

To define a new role, click on the **Create role** button, then set the
following parameters:

- **Role ID**: the ID of the role (e.g. `kibiuser`); must be a lowercase
  alphanumeric string.
- **Backend roles**: a list of Search Guard roles that will be mapped to this
  Kibi role (e.g. `kibiuser`)
- **Rules**: a list of rules on saved object types.

Each rule is defined by three parameters:

- **Action**: allow or deny
- **Permission**: the permission to allow or deny
- **Context**: the saved object type on which the permission must be enforced.

._The Create role button_
image::images/access_control/create_role_button_5.png["The Create role button",align="center"]

._Saving a role_
image::images/access_control/saving_role_5.png["Saving a role",align="center"]

==== Object permissions

In addition to role level permissions, it is possible to define permissions
on specific objects by visiting **Settings > Objects** and clicking on the
permissions button next to an object:

._The object permissions button_
image::images/access_control/object_perms_button_5.png["The object permissions button",align="center"]

The object permissions form allows to set the owner of the object and custom
access rules.

By default the owner is set to the user that created the object; the owner has
all permissions on the created object; it is possible to unset the owner of an
object by leaving the field blank and clicking on the Save button.

Custom access rules can be used to grant access to an object that would be
otherwise hidden; for example, if `everyone` is not granted to display
dashboards but you want to display the `Overview` dashboard to all users, visit
the object permissions form for the `Overview` dashboard and set the `View`
permission for `everyone` to `Allow`.

If `everyone` can see dashboards but you'd like to hide the `IT` dashboard to
users, set the `View` permission for `everyone` to `Deny`.

._The object permissions form_
image::images/access_control/object_permissions.png["The object permissions form",align="center"]

==== Notes

Although users are not allowed to view or edit the following types unless they
have permission to do so, they will be retrieved and executed by the backend if
used by a visualization:

- Query
- Query templates
- Data source

=== Logstash configuration

To enable authentication in Logstash, set the following parameters in the
**output.elasticsearch** section:

- **user**: the username of the user having the logstash role.
- **password**: the password of the user having the logstash role.
- **ssl**: set to true to enable SSL.
- **truststore**: the path to the CA truststore file.
- **truststore_password**: the password of the CA truststore file.

E.g.:

[source]
----
output {
    elasticsearch {
       hosts => ["localhost:9220"]
       user => logstash
       password => password
       ssl => true
       truststore => "/etc/pki/logstash/truststore.jks"
       truststore_password => password
    }
}
----

The truststore file must be copied on all nodes running Logstash.

=== Beats configuration

To enable authentication in a beat which connects directly to Elasticsearch,
set the following parameters in the **output.elasticsearch** section:

- **protocol**: set to _https_.
- **username**: the username of the user having the logstash role.
- **password**: the password of the user having the logstash role.
- **tls.certificate_authorities**: an array containing the path to the CA
  truststore file in PEM format.

E.g.:

[source,yaml]
----
output:

  elasticsearch:
    hosts: ["localhost:9220"]

    protocol: "https"
    username: "logstash"
    password: "password"

    tls:
      certificate_authorities: ["/etc/pki/filebeat/ca.pem"]
----

The root certification authority in PEM format must be copied to all nodes
running one or more beats.

=== Console configuration

In order to successfully submit queries from console to a cluster secured by
Search Guard set the following parameters in `config/kibi.yml`:

[source,yaml]
----
console.proxyConfig:
  - match:
      protocol: "https"

    ssl:
      ca: "pki/searchguard/ca.pem"
----

`console.proxyConfig.ssl.ca` must point to the CA certificate bundle, so it can
be set to the same value as the `elasticsearch.ssl.ca` parameter.

=== X-Pack monitoring configuration

In order to store monitoring data in a cluster secured by Search Guard it is
required to configure agent exporters to submit data over an authenticated
HTTPS connection.

The exporter configuration in `elasticsearch.yml` must include the following
parameters:

- `type`: `http`.
- `host`: an array of URLs that will be contacted by the exporter.
- `auth.username`: the username of the Marvel agent user.
- `auth.password`: the password of the Marvel agent user.
- `ssl.truststore.path`: the path to the CA certificate truststore (this will
  usually be the same as the one specified in the Search Guard configuration).
- `ssl.truststore.password`: the password of the CA certificate truststore.

For example, the following configuration defines an exporters which sends data
to the cluster at `https://localhost:9220`, authenticating as the `monitoring`
user:

[source,yaml]
----
xpack.monitoring.exporters:
  id1:
    type: http
    host: ["https://localhost:9220"]

    auth:
      username: monitoring
      password: password

    ssl:
      truststore.path: truststore.jks
      truststore.password: password
----

=== X-Pack plugin for Kibana

The X-Pack security plugin is not compatible with Kibi access control; you can disable
it by adding the following lines to the `kibi.yml` file:

[source,yaml]
----
xpack:
  security:
    enabled: false
----

To enable Kibana monitoring in X-Pack, you'll need to grant the
`cluster:admin/xpack/monitoring/bulk` permission to the `kibiserver` role; the permission
can be added to the existing permissions in the `cluster` section of the role.

If you do not need Kibana monitoring, you can add the following lines to `kibi.yml` to disable it:

[source,yaml]
----
xpack:
  monitoring:
    kibana:
      collection:
        enabled: false
----

=== Handling of authorization errors

Kibi  parses generic authorization errors from Elasticsearch to report them
in a more understandable way.

While using Kibi  on a secured cluster, you might see the following errors:

* _"Kibi Relational Filter: Could not load filter Relational visualization: one
or more join relations refers to unauthorized data"_: displayed when a search
query contains relations between unauthorized indices.
* _"One or more visualizations Refers to unauthorized data"_: displayed when a
dashboard contains one or more visualizations loading data from unauthorized
indices.
* _"Enhanced search results: Refers to unauthorized data"_: displayed
when an "Enhanced search results" visualization tries to load data from
unauthorized indices.
* _"Kibi Relational Filter: there are relations with unauthorized data"_:
displayed when there are relationships between unauthorized indices.
* _"One or more saved search refers to unauthorized data"_: displayed when a
saved search is executed on an unauthorized index.

These errors appear for five seconds as a yellow toaster at the top of the
screen.

Authorization errors can be hidden by changing the value of the
*kibi:shieldAuthorizationWarning* setting: click on the _Settings_ tab, then on
_Advanced_ tab, and uncheck the setting to hide authorization errors messages.
Regardless of this setting, all authorization errors will still be reported as
warnings in the logs.

._Two warning messages example_
image::images/authorization-warning-messages.png["Two warning messages example",align="center"]

If a dashboard is configured on an index on which you have no permission, all
the visualizations loading data from the index will be empty and the custom
warning message will be displayed at the top of the screen; in addition, the
document count for the dashboard will display the message *Unauthorized*.

If a dashboard is configured on an index on which you have permission to see only
a subset of documents or fields, the visualizations will only process and display
the data you're authorized to view.

._A visualizations that loads unauthorized data._
image::images/authorization-visualization-error.png["A visualization that loads unauthorized data.",align="left"]

._A visualizations that refers to an unauthorized index._
image::images/authorization-visualization-empty.png["A visualization that refers to an unauthorized index.",align="left"]
