[[getting_started]]
= Getting Started

== The demo distribution
The quickest way to get started with {kibi-name} is to download the Siren Platform demo
distribution from {download-ref}[the downloads page].

The Siren Platform demo distribution includes a ready to use Elasticsearch cluster in
the `elasticsearch` directory; the cluster contains five indices:

[horizontal]
`company`:: a collection of companies
`article`:: a collection of articles about companies
`investment`:: a collection of investments in companies
`investor`:: a collection of investors
`.siren`:: {kibi-name} configuration

The indices have been populated through https://www.elastic.co/products/logstash[Logstash]
from the SQLite database in `siren-investigate/crunchbase.db`, as described in the <<logstash>> chapter.

NOTE: The demo dataset has been built from a sample of articles gathered from
tech blogs in 2013 and from data about companies, investments and investors in
the CrunchBase 2013 Snapshot, which is copyright (C) 2013 AOL Inc.

== Users

You can access the demo as three different users:

- `sirenadmin`: has read access to all data indices and can modify the {kibi-name} configuration.
- `sirenuser`: has read access to all data indices but cannot modify the {kibi-name} configuration.
- `sirennoinvestor`: has read access to all data indices except `investor`; the user has no access to the `Investors` dashboard.

The password for all users is `password`.

== Search
After starting Elasticsearch and {kibi-name}, as described in the <<setup, Setup chapter>>,
start your web browser and navigate to {start-url}.

include::sidebar/sidebar.asciidoc[]

By default {kibi-name} displays the _Articles_ dashboard, <<dashboard, dashboards>>
can be configured to display multiple <<visualize, visualizations>> on the
documents stored in a specific index or returned by a <<save-search,saved search>> on an index pattern.

Each dashboard is represented by a tab containing the dashboard title and
the number of documents available to visualizations.

image::images/getting_started/demo_overview.png["The articles dashboard",align="center"]

You can quickly search specific articles through the search input in the
navigation bar. For example, let's find all the articles written about
_wireless_ or _wifi_:

image::images/getting_started/demo_dashboard_search.png["The dashboard search bar",align="center"]

We can immediately see that there are 11595 articles about those topics and
all the visualizations are refreshed to aggregate data for this subset of
articles.

NOTE: Besides simple text, queries in the search bar can be written using the
Lucene https://lucene.apache.org/core/2_9_4/queryparsersyntax.html[query
syntax], or {elastic-ref}/query-dsl.html[Elasticsearch Query DSL].

== Filters
Visualizations can be used to create filters. For example, you can see all the
articles about _wireless_ or _wifi_ published by TechCrunch by clicking on
the _TechCrunch_ slice inside the _Articles by Source_ <<pie-chart, pie chart>>
visualization:

image::images/getting_started/demo_pie_slice.png["Clicking on a pie slice",align="center"]

image::images/getting_started/demo_pie_filter.png["The dashboard with the filter on the slice applied",align="center"]

NOTE: To disable a filter, just move the mouse over it and click on the
checkbox icon; you can disable all the filters applied to the dashboard by
clicking on _Actions_ and then _Disable_; for more information about filtering,
please read the <<_filters, filters>> chapter.

== Relational Filters
The <<relational_filter, Relational Filter>> visualization allows to
create cross-dashboard filters. For example, by looking below at the _Companies_
button in the dashboard, you can see that there are 470 companies mentioned in
the TechCrunch articles about _wireless_ or _wifi_.

image::images/getting_started/demo_companies_dashboard_overview.png["Relational filter from Articles to Companies",align="center"]

The relational filter created by clicking on the button is displayed in the
filter bar, and can be disabled or deleted just like any other filter. Moving
the mouse over the filter will display the list of joined indices and their
filters:

image::images/getting_started/relational_filter_explanation.png["Relational filter in the filter bar",align="center"]

Relational filter can be accumulated. For example, if you click on the
`Investment rounds -->` button, you will see data about the 351 investment
rounds related to a subset of 470 companies mentioned in the TechCrunch articles
about _wireless_ or _wifi_.

Now Click on _Companies_ to go back to the Companies dashboard. To understand how to define a relational filter, first click on _Edit_ on the top right menu. Then click on the pencil icon
inside the _Relational widget_ visualization heading - this will open the
configuration editor:

image::images/getting_started/relational_filter_config.png["Relational filter configuration",align="center", width="300"]

As you can see, it is possible to set two different values for the label displayed
on the button and for the label displayed in the filter; it is also possible
to use a single configuration for all the dashboards, as the visualization will
display only buttons relevant to the currently displayed dashboard.

Click on the _Dashboard_ tab to go back to the Companies dashboard.

NOTE: for more informations about relational filters, please read the
<<relational_filter>> chapter.

== Query Based Aggregations

It is possible to get additional information about companies by using the
results of queries on SQL databases (or any of the datasources supported by
{kibi-name}) as aggregations on Elasticsearch documents.

For example, in the _Query on Companies_ visualization you can see that 41 of
the 96 companies have competitors and 8 of them are in the top 500 companies
by number of employees:

image::images/getting_started/demo_query_companies.png["SQL based aggregations",align="center"]

`Companies "With competitors"` and `Top 500 companies (HR count)` are <<datasource-queries, queries>>
on the SQLite database. The records returned by the queries are used to filter
Elasticsearch documents, which can be then aggregated in a metric.

To better understand this feature, let's have a look at the
`Top 500 companies (HR count)` query. To see the query, click on _Saved Objects_ in the _Management_ menu.

image::images/getting_started/view_saved_object.png["The query editor",align="center"]

The query returns the `id`, `label` and `number_of_employees` columns
from the `company` table for the top 500 companies by number of employees:

[source,sql]
select id, label, number_of_employees
from company
where number_of_employees>0
order by number_of_employees desc
limit 500

Click on _Dashboard_, then _Edit_, and then on the pencil icon in the heading of
the _Query on Companies_ visualization to customize its configuration. The _metrics_ section defines the aggregations on Elasticsearch documents,
displayed as columns in the table. The _buckets_ section defines the groups
of Elasticsearch documents aggregated by metrics, displayed as row headers
in the table.

image::images/getting_started/dashboard_edit_query_vis_agg.png["Query on Companies configuration",align="center"]

By expanding the _Split Rows_ section inside _buckets_ you can see how the
queries are used to define groups of Elasticsearch documents. Scroll down to see the configuration of the fourth filter:

image::images/getting_started/query_vis_filter_agg.png["Configuration of an external query terms filter",align="center"]

The filter is configured to execute the query `Top 500 companies (HR count)`
on the SQLite database and return the group of Elasticsearch documents from
the current search whose `id` is equal to one of the id's in the query
results. The documents are then processed by the _Count_ metric.

Let's add a new aggregation to show the average number of employees. Click
on _Add metrics_ inside the _metrics_ section, then select `Metric` as the
metric type; select `Average` as the aggregation and `number_of_employees`
as the field, then click on the *apply changes* button image:images/apply-changes-button.png[].

Save the visualization by clicking on the _Save_ button, then click on the _Dashboard_
tab to see the updated visualization in the _Companies_ dashboard:

image::images/getting_started/add_metric.png["Average aggregation",align="center"]

Click _Add sub-buckets_ at the bottom, then select `Split Rows` as the bucket type. Choose the `Terms` aggregation and the `countrycode` field from
the drop-downs.
Click the *apply changes* button image:images/apply-changes-button.png[] to add an external ring with the new
results.

image::images/getting_started/bucket_aggregation.png["Countrycode aggregation",align="center"]

NOTE: read the <<createvis, Create A Visualization>> chapter for an in-depth explanation of
aggregations.

In addition to defining groups to aggregate, queries can be used as filters. To see this click on _Dashboard_, then in the 'Query on Companies' dashboard tile, hover the mouse over the row for _Top-500-companies-(HR-count)_ and click the + icon which appears.

image::images/getting_started/selecting_filter_queryoncompanies.png["Filter dashboard using a SQL query",align="center"]

Then you will see only the companies mentioned in the articles which are also in the top 500 by number of employees:

image::images/getting_started/query_vis_filterbar.png["Filter dashboard using a SQL query result",align="center"]

== Datasource Entity Selection

It is possible to select a company entity (record) in the SQLite database (
and entities in <<external_datasources, external datasources>> in general) by
clicking on its label in the _Companies Table_.

The selected entity can be used as a parameter in <<datasource-queries, queries>>;
for example, click on `Makeably` in _Companies Table_:

image::images/getting_started/entity_selection.png["Entity selection",align="center", width="800"]

Selecting an entity enables additional queries on external datasources. For
example, in the _Query on Companies_ visualization you can see that, amongst
the top 500 companies by number of employees mentioned in articles about
`wireless` or `wifi`, `Baidu` has one competitor and there are five companies
in the same domain.
All widgets affected by the selected entity are marked by a purple header.

For the Y-axis metrics aggregation, select *Unique Count*, with *speaker* as the field. For Shakespeare plays, it might
be useful to know which plays have the lowest number of distinct speaking parts, if your theater company is short on
actors. For the X-Axis buckets, select the *Terms* aggregation with the *play_name* field. For the *Order*, select
*Ascending*, leaving the *Size* at 5.

Leave the other elements at their default values and click the  *Apply Changes* button image:images/apply-changes-button.png[]. Your chart should now look
like this:

Selecting an entity also enables the display of additional data in the
_Company Info_ visualization; by clicking on the _(show)_ links you can
toggle the list of companies in the same domain and competitors. The data in
the tables is fetched from queries on the SQLite database, using the selected
company ID as a parameter. The queries are rendered using
<<kibi_query_viewer, customizable templates>>, which will be introduced
later.

The selected entity appears as a purple box on the right of the filter bar;
to deselect an entity, click on the bin icon displayed when moving the mouse
over the purple box.

NOTE: for additional documentation about entity selection, please read the
<<entity_selection>> section in the <<external_datasources>> chapter.

== Enhanced Search Results

The <<enhanced_search_results>> visualization displays the current set of
Elasticsearch documents as a table. For example, _Companies Table_ is
configured to display the following fields:

- Time (foundation date)
- label (the company name)
- description
- category_code
- founded_year
- countrycode
- Why Relevant? (a <<relational-column, relational column>>)

image::images/getting_started/companies_table.png["Companies table",align="center"]

By selecting *Edit* and then clicking on the pencil icon, you are brought to a view where you can choose which fields to display and
customize the order of the columns. If the index is time based, the `Time` column will be always displayed.

Expand the first row by clicking on the right arrow, then scroll
down to the `homepage_url` field and click on the Toggle column icon:

image::images/getting_started/edit_search_results.png["Column positioning",align="center"]

You can click on the arrows to move the column to the desired position:

image::images/getting_started/edit_search_results_layout.png["Column positioning",align="center"]

=== Click Handlers
You can define click handlers on cells to perform several actions. Let's add a
click handler to open the company homepage when clicking on the cell displaying
the URL.

The table is pre-configured with a click handler on `label` that is used to
select an entity in the SQLite database.

To add a new click handler, go into edit mode, scroll down _view options_ and click on
_Add click handler_; select `homepage_url` in the _Column_ dropdown, then
`Follow the URL` in the _On click I want to_ dropdown. Select `homepage_url`
as the _URL field_, then click on the click the  *Apply Changes* button image:images/apply-changes-button.png[] to apply changes.

You can test the click handler immediately by clicking on a cell displaying
an homepage URL in the preview displayed on the right:

image::images/getting_started/click_handler_url.png["URL click handler",align="center"]

[float]
=== Relational Column

You can enable the relational column to be displayed when an Elasticsearch document
is matched by a query on the SQLite database. The relational column reports on the relationship, based on the queries configured.

In the example below, in the _Companies Table_, you can see that `Big Fish` is listed here because it has competitors.

image::images/getting_started/relational_column_example.png["Relational column example",align="center"]

image::images/getting_started/relational_column_config.png["Relational column configuration",align="center"]

[float]
=== Saving the Visualization

Click on the save button in the top right to save the visualization, then
click on *Dashboard* to go back to the Companies dashboard.

NOTE: for additional documentation about this visualization, please read the
<<enhanced_search_results>> chapter.

[float]
== Query Templates

*Company Info* which is an instance of a {kibi-name} query viewer visualization,
displays the results of three SQL queries by rendering their results through
templates; the queries take the selected entity ID as an input, thus the
associated templates will be displayed only when an entity is selected.

image::images/getting_started/templated_query_viewer.png["{kibi-name} query viewer example",align="center"]

The association between the query and templates can be set in the visualization
configuration:

image::images/getting_started/templated_query_viewer_config.png["{kibi-name} query viewer configuration",align="center"]

Query templates can be managed by clicking on the *Management* icon, then select *Advanced Settings* followed by *Templates*.

NOTE: you can find the documentation about templates in the
<<external_datasources>> chapter; the visualization is documented in the
<<kibi_query_viewer>> chapter.

The <<relational_filter, Relational Filter>> visualization allows you to
create cross-dashboard filters. In the example above you can see that there are 438 companies mentioned in
the TechCrunch articles about _wireless_ or _wifi_. By clicking on the button, you can switch to the _Companies_ dashboard and
visualize the data about these companies:
Relational filters can be accumulated. If you click on the
`Investment rounds -->` button, you will see the data about those investment
rounds related to the companies mentioned in the TechCrunch articles
