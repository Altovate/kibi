[[sentinl-introduction]]
== Introduction

[[what-is-siren-alert]]
=== What is SIREN ALERT?

SIREN ALERT is an App Plugin extending Kibana or Siren Investigate with dynamic
Alerting and Reporting functionality

"Designed to monitor, validate and inform users and systems on data
series changes using standard or join queries, programmable result
validators, transformers and templates to send out notifications using a
variety of configurable actions reaching users, interfacing with remote
APIs for data and commands, generating new Elasticsearch documents,
arbitrary metrics towards any other platform, planting triggers for
itself to use and so much more."

[[sentinl-vs.-x-pack]]
==== SIREN ALERT vs. X-PACK

*SIREN ALERT* provides X-Pack-like Alerting & Reporting functionality
directly within Siren Investigate & Kibana in the form of a powerful plugin,
leveraging all available native features such as a secure client for
queries and extending the UI with tools for managing configuration,
scheduling and handling executions of user Alerts and Reports.

*SIREN ALERT* is also transparent to the Elasticsearch cluster(s) it
monitors, appearing as a regular client and requiring no complex
installation, restarts and no licensing fees.

Powered by the many I/O modules the Node.JS community offers, SIREN
ALERT usage is not limited to Elasticsearch and its capabilities can
easily be extended to fully interface with third party data sources and
platforms for ingress and egress data.

[[what-is-a-watcher]]
=== WHAT IS A WATCHER?

*SIREN ALERT* allows automation of recurring “questions” (as queries) by
using Watchers.

Some Examples for illustration:

* HIT COUNT PER HOUR
* QUESTION: How many hits does index X receive hourly?
* WATCHER: query index and return count of hits in last hour
* ACTION: Notify with number of Hits per hour
* METRIC THRESHOLDS
* QUESTION: Are any of my monitored metrics surpassing a certain value?
* WATCHER: query index and type for specific values, aggregated by an
arbitrary field.
* ACTION: Notify with aggs bucket details every time a threshold is
surpassed or spike anomaly detected.
* BLACKLISTS HITS
* QUESTION: Are any of my users trying to reach blacklisted destinations?
* WATCHER: query firewall logs comparing destination IPs to a blacklist.
* ACTION: Notify admin via email if any IP >= 10 matches returned
* FAILED LOGINS
* QUESTION: Are there recurring failure attempts authenticating users on
my network?
* WATCHER: query active directory logs for login failures in last hour
and compare to user index. .
* ACTION: Notify admin via webhook if >= 10 matches returned
* LEAK DETECTION (chain)
* QUESTION: Are there any public leaks about my data I was not aware of?
* WATCHER: query for user emails included in published leaks ingested
from third parties.
* ACTION: Save hits in secondary result Index. Notify via email if leak
was not known in a secondary Watcher

'''''
